
Sprint10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00002328  000023bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045f  0080013e  0080013e  000023fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000242c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00002470  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046f2  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e81  00000000  00000000  00006eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025a2  00000000  00000000  00007d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bb8  00000000  00000000  0000a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dc4  00000000  00000000  0000ae98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004571  00000000  00000000  0000bc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  000101cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_13>
      38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_21>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e8 e2       	ldi	r30, 0x28	; 40
     2bc:	f3 e2       	ldi	r31, 0x23	; 35
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ae 33       	cpi	r26, 0x3E	; 62
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ae e3       	ldi	r26, 0x3E	; 62
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ad 39       	cpi	r26, 0x9D	; 157
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 13 07 	call	0xe26	; 0xe26 <main>
     2de:	0c 94 92 11 	jmp	0x2324	; 0x2324 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <USART_Init>:
// Função para recepção de um frame de 5 a 8bits
unsigned char USART_Receive(void)
{
	while(!(UCSR0A & (1<<RXC0))); //Espera o dado ser recebido
	return UDR0; //Lê o dado recebido e retorna
}
     2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     2ee:	88 e9       	ldi	r24, 0x98	; 152
     2f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     2fa:	08 95       	ret

000002fc <USART_Transmit>:
     2fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     300:	95 ff       	sbrs	r25, 5
     302:	fc cf       	rjmp	.-8      	; 0x2fc <USART_Transmit>
     304:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     308:	08 95       	ret

0000030a <__vector_18>:
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
     32c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     330:	8c 36       	cpi	r24, 0x6C	; 108
     332:	11 f4       	brne	.+4      	; 0x338 <__vector_18+0x2e>
     334:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <temperatura_max>
     338:	84 36       	cpi	r24, 0x64	; 100
     33a:	39 f4       	brne	.+14     	; 0x34a <__vector_18+0x40>
     33c:	84 e0       	ldi	r24, 0x04	; 4
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_read_byte>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 7e 01 	call	0x2fc	; 0x2fc <USART_Transmit>
     34a:	ff 91       	pop	r31
     34c:	ef 91       	pop	r30
     34e:	bf 91       	pop	r27
     350:	af 91       	pop	r26
     352:	9f 91       	pop	r25
     354:	8f 91       	pop	r24
     356:	7f 91       	pop	r23
     358:	6f 91       	pop	r22
     35a:	5f 91       	pop	r21
     35c:	4f 91       	pop	r20
     35e:	3f 91       	pop	r19
     360:	2f 91       	pop	r18
     362:	0f 90       	pop	r0
     364:	0f be       	out	0x3f, r0	; 63
     366:	0f 90       	pop	r0
     368:	1f 90       	pop	r1
     36a:	18 95       	reti

0000036c <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	4f 93       	push	r20
     384:	5f 93       	push	r21
     386:	6f 93       	push	r22
     388:	7f 93       	push	r23
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	af 93       	push	r26
     390:	bf 93       	push	r27
     392:	ef 93       	push	r30
     394:	ff 93       	push	r31
	tempoX++;  // Acressento 1 ms
     396:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <tempoX>
     39a:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <tempoX+0x1>
     39e:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <tempoX+0x2>
     3a2:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <tempoX+0x3>
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	c8 1a       	sub	r12, r24
     3aa:	d8 0a       	sbc	r13, r24
     3ac:	e8 0a       	sbc	r14, r24
     3ae:	f8 0a       	sbc	r15, r24
     3b0:	c0 92 7c 01 	sts	0x017C, r12	; 0x80017c <tempoX>
     3b4:	d0 92 7d 01 	sts	0x017D, r13	; 0x80017d <tempoX+0x1>
     3b8:	e0 92 7e 01 	sts	0x017E, r14	; 0x80017e <tempoX+0x2>
     3bc:	f0 92 7f 01 	sts	0x017F, r15	; 0x80017f <tempoX+0x3>
	if((tempoX%5) == 0) // Verdade a cada 5 ms
     3c0:	c7 01       	movw	r24, r14
     3c2:	b6 01       	movw	r22, r12
     3c4:	25 e0       	ldi	r18, 0x05	; 5
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     3d0:	67 2b       	or	r22, r23
     3d2:	68 2b       	or	r22, r24
     3d4:	69 2b       	or	r22, r25
     3d6:	19 f4       	brne	.+6      	; 0x3de <__vector_14+0x72>
		flag5ms = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <flag5ms>
	if((tempoX%500) == 0) // Verdade a cada 500 ms
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	24 ef       	ldi	r18, 0xF4	; 244
     3e4:	31 e0       	ldi	r19, 0x01	; 1
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     3ee:	67 2b       	or	r22, r23
     3f0:	68 2b       	or	r22, r24
     3f2:	69 2b       	or	r22, r25
     3f4:	19 f4       	brne	.+6      	; 0x3fc <__vector_14+0x90>
		flag500ms = 1;
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <flag500ms>
	if(tempoX%tempo_buzzer == 0) // Inverter o estado do pino PC6 para gerar o som do buzzer
     3fc:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <tempo_buzzer>
     400:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <tempo_buzzer+0x1>
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	c7 01       	movw	r24, r14
     40a:	b6 01       	movw	r22, r12
     40c:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     410:	67 2b       	or	r22, r23
     412:	68 2b       	or	r22, r24
     414:	69 2b       	or	r22, r25
     416:	21 f4       	brne	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		PORTC ^= (1<<6); 
     418:	98 b1       	in	r25, 0x08	; 8
     41a:	80 e4       	ldi	r24, 0x40	; 64
     41c:	89 27       	eor	r24, r25
     41e:	88 b9       	out	0x08, r24	; 8
}
     420:	ff 91       	pop	r31
     422:	ef 91       	pop	r30
     424:	bf 91       	pop	r27
     426:	af 91       	pop	r26
     428:	9f 91       	pop	r25
     42a:	8f 91       	pop	r24
     42c:	7f 91       	pop	r23
     42e:	6f 91       	pop	r22
     430:	5f 91       	pop	r21
     432:	4f 91       	pop	r20
     434:	3f 91       	pop	r19
     436:	2f 91       	pop	r18
     438:	ff 90       	pop	r15
     43a:	ef 90       	pop	r14
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_13>:

ISR(TIMER1_OVF_vect) // Interrupção para tratar o estouro
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	8f 93       	push	r24
	flag_estouro = 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <flag_estouro>
}
     45c:	8f 91       	pop	r24
     45e:	0f 90       	pop	r0
     460:	0f be       	out	0x3f, r0	; 63
     462:	0f 90       	pop	r0
     464:	1f 90       	pop	r1
     466:	18 95       	reti

00000468 <__vector_10>:
// Interrupção por captura do valor do IC1
ISR(TIMER1_CAPT_vect)
{
     468:	1f 92       	push	r1
     46a:	0f 92       	push	r0
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	0f 92       	push	r0
     470:	11 24       	eor	r1, r1
     472:	2f 93       	push	r18
     474:	3f 93       	push	r19
     476:	4f 93       	push	r20
     478:	5f 93       	push	r21
     47a:	6f 93       	push	r22
     47c:	7f 93       	push	r23
     47e:	8f 93       	push	r24
     480:	9f 93       	push	r25
     482:	af 93       	push	r26
     484:	bf 93       	push	r27
     486:	ef 93       	push	r30
     488:	ff 93       	push	r31
	if(TCCR1B & (1<<ICES1)) // Ler o valor de contagem do TC1 na borda de subida do sinal
     48a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     48e:	86 ff       	sbrs	r24, 6
     490:	0f c0       	rjmp	.+30     	; 0x4b0 <__vector_10+0x48>
		tempo_subida = ICR1; // Salva a primeira contagem para determinar a largura do pulso
     492:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     496:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     49a:	a0 e0       	ldi	r26, 0x00	; 0
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <tempo_subida>
     4a2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <tempo_subida+0x1>
     4a6:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <tempo_subida+0x2>
     4aa:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <tempo_subida+0x3>
     4ae:	2a c0       	rjmp	.+84     	; 0x504 <__vector_10+0x9c>
	else // Ler o valor de contagem do TC1 na borda de descida do sinal
		tempo_delta = (ICR1 - tempo_subida)*16; // incremento a cada 16us
     4b0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     4b4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     4b8:	a0 e0       	ldi	r26, 0x00	; 0
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <tempo_subida>
     4c0:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <tempo_subida+0x1>
     4c4:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <tempo_subida+0x2>
     4c8:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <tempo_subida+0x3>
     4cc:	84 1b       	sub	r24, r20
     4ce:	95 0b       	sbc	r25, r21
     4d0:	a6 0b       	sbc	r26, r22
     4d2:	b7 0b       	sbc	r27, r23
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	aa 1f       	adc	r26, r26
     4da:	bb 1f       	adc	r27, r27
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	aa 1f       	adc	r26, r26
     4e2:	bb 1f       	adc	r27, r27
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	aa 1f       	adc	r26, r26
     4ea:	bb 1f       	adc	r27, r27
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	aa 1f       	adc	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <tempo_delta>
     4f8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tempo_delta+0x1>
     4fc:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <tempo_delta+0x2>
     500:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <tempo_delta+0x3>
	TCCR1B ^=(1<<ICES1); // Inverter a borda de captura
     504:	e1 e8       	ldi	r30, 0x81	; 129
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	90 81       	ld	r25, Z
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	89 27       	eor	r24, r25
     50e:	80 83       	st	Z, r24
	// Condição para tratar o estouro
	if(flag_estouro == 0) // Quando não temos o estouro
     510:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <flag_estouro>
     514:	81 11       	cpse	r24, r1
     516:	13 c0       	rjmp	.+38     	; 0x53e <__vector_10+0xd6>
		distancia_objeto = tempo_delta/58; // Determinando a distância do objeto
     518:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <tempo_delta>
     51c:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <tempo_delta+0x1>
     520:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tempo_delta+0x2>
     524:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <tempo_delta+0x3>
     528:	2a e3       	ldi	r18, 0x3A	; 58
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     534:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <distancia_objeto+0x1>
     538:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <distancia_objeto>
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__vector_10+0xda>
	else // Quando temos o estouro
		flag_estouro = 0;
     53e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <flag_estouro>
	
	if(distancia_objeto < 200 && (PIND & (1<<7)) && (PIND & (1<<6))) // Calculando o tempo do buzzer ligado/desligado
     542:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <distancia_objeto>
     546:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <distancia_objeto+0x1>
     54a:	68 3c       	cpi	r22, 0xC8	; 200
     54c:	71 05       	cpc	r23, r1
     54e:	d8 f4       	brcc	.+54     	; 0x586 <__vector_10+0x11e>
     550:	4f 9b       	sbis	0x09, 7	; 9
     552:	19 c0       	rjmp	.+50     	; 0x586 <__vector_10+0x11e>
     554:	4e 9b       	sbis	0x09, 6	; 9
     556:	17 c0       	rjmp	.+46     	; 0x586 <__vector_10+0x11e>
		tempo_buzzer = ((float)distancia_objeto/200)*200;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__floatunsisf>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	48 e4       	ldi	r20, 0x48	; 72
     566:	53 e4       	ldi	r21, 0x43	; 67
     568:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	48 e4       	ldi	r20, 0x48	; 72
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     578:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     57c:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <tempo_buzzer+0x1>
     580:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <tempo_buzzer>
     584:	06 c0       	rjmp	.+12     	; 0x592 <__vector_10+0x12a>
	else{
		PORTC &= !(1<<6); 
     586:	88 b1       	in	r24, 0x08	; 8
     588:	18 b8       	out	0x08, r1	; 8
		tempo_buzzer = 0;
     58a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <tempo_buzzer+0x1>
     58e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <tempo_buzzer>
	}
}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	0f 90       	pop	r0
     5b0:	1f 90       	pop	r1
     5b2:	18 95       	reti

000005b4 <__vector_1>:
// Tacômetro
ISR(INT0_vect)
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	8f 92       	push	r8
     5c0:	9f 92       	push	r9
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	2f 93       	push	r18
     5d4:	3f 93       	push	r19
     5d6:	4f 93       	push	r20
     5d8:	5f 93       	push	r21
     5da:	6f 93       	push	r22
     5dc:	7f 93       	push	r23
     5de:	8f 93       	push	r24
     5e0:	9f 93       	push	r25
     5e2:	af 93       	push	r26
     5e4:	bf 93       	push	r27
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
	static uint8_t contVoltas = 0; // Variável local para o número de voltas
	if (contVoltas == 5) // Fazer a velocidade a cada 5 voltas
     5ee:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <__vector_1+0x44>
     5f6:	53 c0       	rjmp	.+166    	; 0x69e <__vector_1+0xea>
	{
		periodo = tempoX - tempo_us; // Determinando o período
     5f8:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <tempoX>
     5fc:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <tempoX+0x1>
     600:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <tempoX+0x2>
     604:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <tempoX+0x3>
     608:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <tempo_us>
     60c:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <tempo_us+0x1>
     610:	6c 01       	movw	r12, r24
     612:	c2 1a       	sub	r12, r18
     614:	d3 0a       	sbc	r13, r19
     616:	d0 92 85 01 	sts	0x0185, r13	; 0x800185 <periodo+0x1>
     61a:	c0 92 84 01 	sts	0x0184, r12	; 0x800184 <periodo>
		tempo_us = tempoX;
     61e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <tempo_us>
     622:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <tempo_us+0x1>
     626:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <tempo_us+0x2>
     62a:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <tempo_us+0x3>
		Velocidade_veiculo = (565.49*diametro)/periodo; // ]Determinando a velocidade
     62e:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <diametro>
     632:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <diametro+0x1>
     636:	07 2e       	mov	r0, r23
     638:	00 0c       	add	r0, r0
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatsisf>
     642:	2c e5       	ldi	r18, 0x5C	; 92
     644:	3f e5       	ldi	r19, 0x5F	; 95
     646:	4d e0       	ldi	r20, 0x0D	; 13
     648:	54 e4       	ldi	r21, 0x44	; 68
     64a:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     64e:	4b 01       	movw	r8, r22
     650:	5c 01       	movw	r10, r24
     652:	0d 2c       	mov	r0, r13
     654:	00 0c       	add	r0, r0
     656:	ee 08       	sbc	r14, r14
     658:	ff 08       	sbc	r15, r15
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatsisf>
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
     666:	c5 01       	movw	r24, r10
     668:	b4 01       	movw	r22, r8
     66a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     66e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     672:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <Velocidade_veiculo>
     676:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <Velocidade_veiculo+0x1>
     67a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Velocidade_veiculo+0x2>
     67e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <Velocidade_veiculo+0x3>
		RPM = 300000/periodo; // Calculando o RPM
     682:	60 ee       	ldi	r22, 0xE0	; 224
     684:	73 e9       	ldi	r23, 0x93	; 147
     686:	84 e0       	ldi	r24, 0x04	; 4
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	a7 01       	movw	r20, r14
     68c:	96 01       	movw	r18, r12
     68e:	0e 94 a7 10 	call	0x214e	; 0x214e <__divmodsi4>
     692:	30 93 93 01 	sts	0x0193, r19	; 0x800193 <RPM+0x1>
     696:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <RPM>
		contVoltas = 0;
     69a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	}
	contVoltas++;
     69e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	// Determinando a distancia percorrida
	distancia1_percorrida += ((float)3.1415*diametro); // Distancia em cm
     6a8:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <diametro>
     6ac:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <diametro+0x1>
     6b0:	07 2e       	mov	r0, r23
     6b2:	00 0c       	add	r0, r0
     6b4:	88 0b       	sbc	r24, r24
     6b6:	99 0b       	sbc	r25, r25
     6b8:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatsisf>
     6bc:	26 e5       	ldi	r18, 0x56	; 86
     6be:	3e e0       	ldi	r19, 0x0E	; 14
     6c0:	49 e4       	ldi	r20, 0x49	; 73
     6c2:	50 e4       	ldi	r21, 0x40	; 64
     6c4:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     6c8:	6b 01       	movw	r12, r22
     6ca:	7c 01       	movw	r14, r24
     6cc:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <distancia1_percorrida>
     6d0:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <distancia1_percorrida+0x1>
     6d4:	40 91 8a 01 	lds	r20, 0x018A	; 0x80018a <distancia1_percorrida+0x2>
     6d8:	50 91 8b 01 	lds	r21, 0x018B	; 0x80018b <distancia1_percorrida+0x3>
     6dc:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <distancia1_percorrida+0x4>
     6e0:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <distancia1_percorrida+0x5>
     6e4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <distancia1_percorrida+0x6>
     6e8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <distancia1_percorrida+0x7>
     6ec:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__floatundisf>
     6f0:	a7 01       	movw	r20, r14
     6f2:	96 01       	movw	r18, r12
     6f4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__addsf3>
     6f8:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfdi>
     6fc:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <distancia1_percorrida>
     700:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <distancia1_percorrida+0x1>
     704:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <distancia1_percorrida+0x2>
     708:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <distancia1_percorrida+0x3>
     70c:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <distancia1_percorrida+0x4>
     710:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <distancia1_percorrida+0x5>
     714:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <distancia1_percorrida+0x6>
     718:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <distancia1_percorrida+0x7>
	distancia_percorrida = distancia1_percorrida/100000; // Distancia em km
     71c:	0f 2e       	mov	r0, r31
     71e:	f0 ea       	ldi	r31, 0xA0	; 160
     720:	af 2e       	mov	r10, r31
     722:	f0 2d       	mov	r31, r0
     724:	0f 2e       	mov	r0, r31
     726:	f6 e8       	ldi	r31, 0x86	; 134
     728:	bf 2e       	mov	r11, r31
     72a:	f0 2d       	mov	r31, r0
     72c:	cc 24       	eor	r12, r12
     72e:	c3 94       	inc	r12
     730:	d1 2c       	mov	r13, r1
     732:	e1 2c       	mov	r14, r1
     734:	f1 2c       	mov	r15, r1
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	10 e0       	ldi	r17, 0x00	; 0
     73a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__udivdi3>
     73e:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <distancia_percorrida>
     742:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <distancia_percorrida+0x1>
	//Temperatura
	RT = ((double)((temperatura*5000)/(5115 - (temperatura*5))));
     746:	c0 90 72 01 	lds	r12, 0x0172	; 0x800172 <temperatura>
     74a:	d0 90 73 01 	lds	r13, 0x0173	; 0x800173 <temperatura+0x1>
     74e:	e0 90 74 01 	lds	r14, 0x0174	; 0x800174 <temperatura+0x2>
     752:	f0 90 75 01 	lds	r15, 0x0175	; 0x800175 <temperatura+0x3>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e4       	ldi	r19, 0x40	; 64
     75a:	4c e9       	ldi	r20, 0x9C	; 156
     75c:	55 e4       	ldi	r21, 0x45	; 69
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     766:	4b 01       	movw	r8, r22
     768:	5c 01       	movw	r10, r24
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 ea       	ldi	r20, 0xA0	; 160
     770:	50 e4       	ldi	r21, 0x40	; 64
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	78 ed       	ldi	r23, 0xD8	; 216
     782:	8f e9       	ldi	r24, 0x9F	; 159
     784:	95 e4       	ldi	r25, 0x45	; 69
     786:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subsf3>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	c5 01       	movw	r24, r10
     790:	b4 01       	movw	r22, r8
     792:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     796:	60 93 69 01 	sts	0x0169, r22	; 0x800169 <RT>
     79a:	70 93 6a 01 	sts	0x016A, r23	; 0x80016a <RT+0x1>
     79e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <RT+0x2>
     7a2:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <RT+0x3>
	temperatura1 = ((double)((RT - 100)*2.6));
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	48 ec       	ldi	r20, 0xC8	; 200
     7ac:	52 e4       	ldi	r21, 0x42	; 66
     7ae:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subsf3>
     7b2:	26 e6       	ldi	r18, 0x66	; 102
     7b4:	36 e6       	ldi	r19, 0x66	; 102
     7b6:	46 e2       	ldi	r20, 0x26	; 38
     7b8:	50 e4       	ldi	r21, 0x40	; 64
     7ba:	0e 94 18 10 	call	0x2030	; 0x2030 <__mulsf3>
     7be:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <temperatura1>
     7c2:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <temperatura1+0x1>
     7c6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <temperatura1+0x2>
     7ca:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <temperatura1+0x3>
	
	// LDR
	Lux_LDR = ((float)1023000/Lux) - 1000; 
     7ce:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <Lux>
     7d2:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <Lux+0x1>
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__floatunsisf>
     7de:	9b 01       	movw	r18, r22
     7e0:	ac 01       	movw	r20, r24
     7e2:	60 e8       	ldi	r22, 0x80	; 128
     7e4:	71 ec       	ldi	r23, 0xC1	; 193
     7e6:	89 e7       	ldi	r24, 0x79	; 121
     7e8:	99 e4       	ldi	r25, 0x49	; 73
     7ea:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <__divsf3>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a e7       	ldi	r20, 0x7A	; 122
     7f4:	54 e4       	ldi	r21, 0x44	; 68
     7f6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subsf3>
     7fa:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     7fe:	70 93 42 01 	sts	0x0142, r23	; 0x800142 <Lux_LDR+0x1>
     802:	60 93 41 01 	sts	0x0141, r22	; 0x800141 <Lux_LDR>
	
	// Condição para o farol ligar
	if(Lux_LDR < 400)
     806:	60 39       	cpi	r22, 0x90	; 144
     808:	71 40       	sbci	r23, 0x01	; 1
     80a:	20 f4       	brcc	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	  PORTB |= (1<<3);
     80c:	85 b1       	in	r24, 0x05	; 5
     80e:	88 60       	ori	r24, 0x08	; 8
     810:	85 b9       	out	0x05, r24	; 5
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	else
	   PORTB &= !(1<<3);
     814:	85 b1       	in	r24, 0x05	; 5
     816:	15 b8       	out	0x05, r1	; 5
	
	if(temperatura1 - ((int)temperatura1)>= (1/2))	// Arredondando
     818:	c0 90 6d 01 	lds	r12, 0x016D	; 0x80016d <temperatura1>
     81c:	d0 90 6e 01 	lds	r13, 0x016E	; 0x80016e <temperatura1+0x1>
     820:	e0 90 6f 01 	lds	r14, 0x016F	; 0x80016f <temperatura1+0x2>
     824:	f0 90 70 01 	lds	r15, 0x0170	; 0x800170 <temperatura1+0x3>
     828:	c7 01       	movw	r24, r14
     82a:	b6 01       	movw	r22, r12
     82c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixsfsi>
     830:	07 2e       	mov	r0, r23
     832:	00 0c       	add	r0, r0
     834:	88 0b       	sbc	r24, r24
     836:	99 0b       	sbc	r25, r25
     838:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatsisf>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__subsf3>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	0e 94 13 10 	call	0x2026	; 0x2026 <__gesf2>
     852:	88 23       	and	r24, r24
     854:	84 f0       	brlt	.+32     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
	temperatura1++;
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e8       	ldi	r20, 0x80	; 128
     85c:	5f e3       	ldi	r21, 0x3F	; 63
     85e:	c7 01       	movw	r24, r14
     860:	b6 01       	movw	r22, r12
     862:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__addsf3>
     866:	60 93 6d 01 	sts	0x016D, r22	; 0x80016d <temperatura1>
     86a:	70 93 6e 01 	sts	0x016E, r23	; 0x80016e <temperatura1+0x1>
     86e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <temperatura1+0x2>
     872:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <temperatura1+0x3>
	if(temperatura1 > temperatura_max) // Pegando o valor maximo da temperatura
     876:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <temperatura_max>
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <__floatsisf>
     884:	c0 90 6d 01 	lds	r12, 0x016D	; 0x80016d <temperatura1>
     888:	d0 90 6e 01 	lds	r13, 0x016E	; 0x80016e <temperatura1+0x1>
     88c:	e0 90 6f 01 	lds	r14, 0x016F	; 0x80016f <temperatura1+0x2>
     890:	f0 90 70 01 	lds	r15, 0x0170	; 0x800170 <temperatura1+0x3>
     894:	a7 01       	movw	r20, r14
     896:	96 01       	movw	r18, r12
     898:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__cmpsf2>
     89c:	88 23       	and	r24, r24
     89e:	34 f4       	brge	.+12     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
	temperatura_max = temperatura1;
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
     8a8:	60 93 71 01 	sts	0x0171, r22	; 0x800171 <temperatura_max>
	if(temperatura1 < 0) // Não permite temperatura negativa
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	a9 01       	movw	r20, r18
     8b2:	c7 01       	movw	r24, r14
     8b4:	b6 01       	movw	r22, r12
     8b6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__cmpsf2>
     8ba:	88 23       	and	r24, r24
     8bc:	44 f4       	brge	.+16     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
	temperatura1 = 0;
     8be:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <temperatura1>
     8c2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <temperatura1+0x1>
     8c6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <temperatura1+0x2>
     8ca:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <temperatura1+0x3>
	// Bateria
	bateria1 = ((float)((bateria*100)/1023));
     8ce:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <bateria>
     8d2:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <bateria+0x1>
     8d6:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <bateria+0x2>
     8da:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <bateria+0x3>
     8de:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <bateria+0x4>
     8e2:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <bateria+0x5>
     8e6:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <bateria+0x6>
     8ea:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <bateria+0x7>
     8ee:	02 e0       	ldi	r16, 0x02	; 2
     8f0:	0e 94 3f 11 	call	0x227e	; 0x227e <__ashldi3>
     8f4:	82 2e       	mov	r8, r18
     8f6:	93 2e       	mov	r9, r19
     8f8:	d4 2f       	mov	r29, r20
     8fa:	c5 2f       	mov	r28, r21
     8fc:	b6 2f       	mov	r27, r22
     8fe:	a7 2f       	mov	r26, r23
     900:	f8 2f       	mov	r31, r24
     902:	e9 2f       	mov	r30, r25
     904:	0e 94 3f 11 	call	0x227e	; 0x227e <__ashldi3>
     908:	a2 2e       	mov	r10, r18
     90a:	b3 2e       	mov	r11, r19
     90c:	c4 2e       	mov	r12, r20
     90e:	d5 2e       	mov	r13, r21
     910:	e6 2e       	mov	r14, r22
     912:	f7 2e       	mov	r15, r23
     914:	08 2f       	mov	r16, r24
     916:	19 2f       	mov	r17, r25
     918:	28 2d       	mov	r18, r8
     91a:	39 2d       	mov	r19, r9
     91c:	4d 2f       	mov	r20, r29
     91e:	5c 2f       	mov	r21, r28
     920:	6b 2f       	mov	r22, r27
     922:	7a 2f       	mov	r23, r26
     924:	8f 2f       	mov	r24, r31
     926:	9e 2f       	mov	r25, r30
     928:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__adddi3>
     92c:	82 2e       	mov	r8, r18
     92e:	93 2e       	mov	r9, r19
     930:	d4 2f       	mov	r29, r20
     932:	c5 2f       	mov	r28, r21
     934:	b6 2f       	mov	r27, r22
     936:	a7 2f       	mov	r26, r23
     938:	f8 2f       	mov	r31, r24
     93a:	e9 2f       	mov	r30, r25
     93c:	02 e0       	ldi	r16, 0x02	; 2
     93e:	0e 94 3f 11 	call	0x227e	; 0x227e <__ashldi3>
     942:	a2 2e       	mov	r10, r18
     944:	b3 2e       	mov	r11, r19
     946:	c4 2e       	mov	r12, r20
     948:	d5 2e       	mov	r13, r21
     94a:	e6 2e       	mov	r14, r22
     94c:	f7 2e       	mov	r15, r23
     94e:	08 2f       	mov	r16, r24
     950:	19 2f       	mov	r17, r25
     952:	28 2d       	mov	r18, r8
     954:	39 2d       	mov	r19, r9
     956:	4d 2f       	mov	r20, r29
     958:	5c 2f       	mov	r21, r28
     95a:	6b 2f       	mov	r22, r27
     95c:	7a 2f       	mov	r23, r26
     95e:	8f 2f       	mov	r24, r31
     960:	9e 2f       	mov	r25, r30
     962:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__adddi3>
     966:	aa 24       	eor	r10, r10
     968:	aa 94       	dec	r10
     96a:	0f 2e       	mov	r0, r31
     96c:	f3 e0       	ldi	r31, 0x03	; 3
     96e:	bf 2e       	mov	r11, r31
     970:	f0 2d       	mov	r31, r0
     972:	c1 2c       	mov	r12, r1
     974:	d1 2c       	mov	r13, r1
     976:	e1 2c       	mov	r14, r1
     978:	f1 2c       	mov	r15, r1
     97a:	00 e0       	ldi	r16, 0x00	; 0
     97c:	10 e0       	ldi	r17, 0x00	; 0
     97e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__udivdi3>
     982:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__floatundisf>
     986:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fixunssfdi>
     98a:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <bateria1>
     98e:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <bateria1+0x1>
     992:	40 93 5b 01 	sts	0x015B, r20	; 0x80015b <bateria1+0x2>
     996:	50 93 5c 01 	sts	0x015C, r21	; 0x80015c <bateria1+0x3>
     99a:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <bateria1+0x4>
     99e:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <bateria1+0x5>
     9a2:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <bateria1+0x6>
     9a6:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <bateria1+0x7>
	// Transformar o valor do potênciometro de analógico para digital
	if(Velocidade_veiculo > 20 && distancia_objeto < 300) // Restringindo a aceleração do motor a 20%
     9aa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Velocidade_veiculo>
     9ae:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Velocidade_veiculo+0x1>
     9b2:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <Velocidade_veiculo+0x2>
     9b6:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <Velocidade_veiculo+0x3>
     9ba:	45 97       	sbiw	r24, 0x15	; 21
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	10 f1       	brcs	.+68     	; 0xa06 <__stack+0x107>
     9c2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <distancia_objeto>
     9c6:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <distancia_objeto+0x1>
     9ca:	8c 32       	cpi	r24, 0x2C	; 44
     9cc:	91 40       	sbci	r25, 0x01	; 1
     9ce:	d8 f4       	brcc	.+54     	; 0xa06 <__stack+0x107>
	{
		aceleracao1 = (aceleracao*255)/10230;
     9d0:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <aceleracao>
     9d4:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <aceleracao+0x1>
     9d8:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <aceleracao+0x2>
     9dc:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <aceleracao+0x3>
     9e0:	af ef       	ldi	r26, 0xFF	; 255
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__muluhisi3>
     9e8:	26 ef       	ldi	r18, 0xF6	; 246
     9ea:	37 e2       	ldi	r19, 0x27	; 39
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     9f4:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <aceleracao1>
     9f8:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <aceleracao1+0x1>
     9fc:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <aceleracao1+0x2>
     a00:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <aceleracao1+0x3>
     a04:	1a c0       	rjmp	.+52     	; 0xa3a <__stack+0x13b>
	}
	else
	 aceleracao1 = (aceleracao*255)/1023;
     a06:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <aceleracao>
     a0a:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <aceleracao+0x1>
     a0e:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <aceleracao+0x2>
     a12:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <aceleracao+0x3>
     a16:	af ef       	ldi	r26, 0xFF	; 255
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__muluhisi3>
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	33 e0       	ldi	r19, 0x03	; 3
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
     a2a:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <aceleracao1>
     a2e:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <aceleracao1+0x1>
     a32:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <aceleracao1+0x2>
     a36:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <aceleracao1+0x3>
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_5>:

//Interrupção externa para os pinos D
ISR(PCINT2_vect)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
	if(!tst_bit(PIND, PD4))
     a82:	4c 99       	sbic	0x09, 4	; 9
     a84:	0e c0       	rjmp	.+28     	; 0xaa2 <__vector_5+0x2e>
	{
		if(!(PIND & (1<<4))) //Botão (+)
     a86:	4c 99       	sbic	0x09, 4	; 9
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <__vector_5+0x2e>
		if(diametro < 250) // Limite superior do diametro do pneu
     a8a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <diametro>
     a8e:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <diametro+0x1>
     a92:	8a 3f       	cpi	r24, 0xFA	; 250
     a94:	91 05       	cpc	r25, r1
     a96:	2c f4       	brge	.+10     	; 0xaa2 <__vector_5+0x2e>
		diametro++; //Aumenta o diâmetro do pneu
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <diametro+0x1>
     a9e:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <diametro>
	}
	if(!tst_bit(PIND, PD5))
     aa2:	4d 99       	sbic	0x09, 5	; 9
     aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__vector_5+0x4e>
	{
		if(!(PIND & (1<<5)))//Botão (-)
     aa6:	4d 99       	sbic	0x09, 5	; 9
     aa8:	0c c0       	rjmp	.+24     	; 0xac2 <__vector_5+0x4e>
		if(diametro > 0)// Limite inferior do diametro do pneu
     aaa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <diametro>
     aae:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <diametro+0x1>
     ab2:	18 16       	cp	r1, r24
     ab4:	19 06       	cpc	r1, r25
     ab6:	2c f4       	brge	.+10     	; 0xac2 <__vector_5+0x4e>
		diametro--; //Diminui o diâmetro do pneu
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <diametro+0x1>
     abe:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <diametro>
	}
}
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <__vector_21>:
// Interrupção para o ADC
ISR(ADC_vect){
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
	switch(Cont){ // Selecionar a entrada do ACD
     af6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Cont>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	c9 f0       	breq	.+50     	; 0xb30 <__vector_21+0x60>
     afe:	30 f0       	brcs	.+12     	; 0xb0c <__vector_21+0x3c>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	51 f1       	breq	.+84     	; 0xb58 <__vector_21+0x88>
     b04:	83 30       	cpi	r24, 0x03	; 3
     b06:	09 f4       	brne	.+2      	; 0xb0a <__vector_21+0x3a>
     b08:	3f c0       	rjmp	.+126    	; 0xb88 <__vector_21+0xb8>
     b0a:	4c c0       	rjmp	.+152    	; 0xba4 <__vector_21+0xd4>
		case 0: // Aceleração
		aceleracao = ADC;
     b0c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     b10:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <aceleracao>
     b1c:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <aceleracao+0x1>
     b20:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <aceleracao+0x2>
     b24:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <aceleracao+0x3>
		ADMUX = 0b01000001;
     b28:	81 e4       	ldi	r24, 0x41	; 65
     b2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
     b2e:	3a c0       	rjmp	.+116    	; 0xba4 <__vector_21+0xd4>
		case 1: // Temperatura da Bateeria
		temperatura = ADC;
     b30:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     b34:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__floatunsisf>
     b40:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <temperatura>
     b44:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <temperatura+0x1>
     b48:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <temperatura+0x2>
     b4c:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <temperatura+0x3>
		ADMUX = 0b01000010;
     b50:	82 e4       	ldi	r24, 0x42	; 66
     b52:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
     b56:	26 c0       	rjmp	.+76     	; 0xba4 <__vector_21+0xd4>
		case 2: // Porcentagem da Bateria
		bateria = ADC;
     b58:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     b5c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     b60:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <bateria>
     b64:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <bateria+0x1>
     b68:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <bateria+0x2>
     b6c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <bateria+0x3>
     b70:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <bateria+0x4>
     b74:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <bateria+0x5>
     b78:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <bateria+0x6>
     b7c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <bateria+0x7>
		ADMUX = 0b01000011;
     b80:	83 e4       	ldi	r24, 0x43	; 67
     b82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		break;
     b86:	0e c0       	rjmp	.+28     	; 0xba4 <__vector_21+0xd4>
		case 3: // SENSOR LDR
		Lux = ADC;
     b88:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     b8c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     b90:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <Lux+0x1>
     b94:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Lux>
		ADMUX = 0b01000000;
     b98:	80 e4       	ldi	r24, 0x40	; 64
     b9a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		Cont = -1;
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Cont>
		break;
	}
	Cont++;
     ba4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <Cont>
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <Cont>
}
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	0f 90       	pop	r0
     bd0:	1f 90       	pop	r1
     bd2:	18 95       	reti

00000bd4 <Ler_EEPROM>:
		eeprom_write_word(2,diametro);
		eeprom_write_byte(4,temperatura_max);
	}
}
void Ler_EEPROM() // Gravar os dados na EEPROM
{
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
	distancia_percorrida = eeprom_read_word(0);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <eeprom_read_word>
     be0:	ec 01       	movw	r28, r24
     be2:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <distancia_percorrida+0x1>
     be6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <distancia_percorrida>
	diametro = eeprom_read_word(2);
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 69 11 	call	0x22d2	; 0x22d2 <eeprom_read_word>
     bf2:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <diametro+0x1>
     bf6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <diametro>
	temperatura_max = eeprom_read_byte(4);
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 61 11 	call	0x22c2	; 0x22c2 <eeprom_read_byte>
     c02:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <temperatura_max>
	
	distancia1_percorrida = distancia_percorrida*100000; // Recalculando o valor da velocidade em cm
     c06:	de 01       	movw	r26, r28
     c08:	20 ea       	ldi	r18, 0xA0	; 160
     c0a:	36 e8       	ldi	r19, 0x86	; 134
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__muluhisi3>
     c14:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <distancia1_percorrida>
     c18:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <distancia1_percorrida+0x1>
     c1c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <distancia1_percorrida+0x2>
     c20:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <distancia1_percorrida+0x3>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	bb 0f       	add	r27, r27
     c2a:	88 0b       	sbc	r24, r24
     c2c:	98 2f       	mov	r25, r24
     c2e:	dc 01       	movw	r26, r24
     c30:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <distancia1_percorrida+0x4>
     c34:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <distancia1_percorrida+0x5>
     c38:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <distancia1_percorrida+0x6>
     c3c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <distancia1_percorrida+0x7>
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <Mostrar_Velocidade>:

void Mostrar_Velocidade(uint8_t *flag5ms1){ // Função para mostrar a velocidade
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24

	if(*flag5ms1){
     c4c:	88 81       	ld	r24, Y
     c4e:	88 23       	and	r24, r24
     c50:	31 f0       	breq	.+12     	; 0xc5e <Mostrar_Velocidade+0x18>
		Shift_reg(Velocidade_veiculo);
     c52:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Velocidade_veiculo>
     c56:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Velocidade_veiculo+0x1>
     c5a:	0e 94 b1 07 	call	0xf62	; 0xf62 <Shift_reg>
		}
		*flag5ms1 = 0;
     c5e:	18 82       	st	Y, r1
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <Display>:
void Display (uint8_t *flag500ms1){ // Função para mostrar no display
     c66:	0f 93       	push	r16
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
	
	if(*flag500ms1 && !(PIND & (1<<6)) || !(PIND & (1<<7)) ){
     c6e:	88 81       	ld	r24, Y
     c70:	88 23       	and	r24, r24
     c72:	11 f0       	breq	.+4      	; 0xc78 <Display+0x12>
     c74:	4e 9b       	sbis	0x09, 6	; 9
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <Display+0x16>
     c78:	4f 99       	sbic	0x09, 7	; 9
     c7a:	a2 c0       	rjmp	.+324    	; 0xdc0 <Display+0x15a>
		int8_t inicio = 1; //posição vertical do cursor
		GLCD_Clear();
     c7c:	0e 94 07 0c 	call	0x180e	; 0x180e <GLCD_Clear>
		GLCD_GotoXY(1,inicio);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintString("LASD Car");
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		// Porcentagem da batria
		GLCD_GotoXY(87,inicio+3);
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	87 e5       	ldi	r24, 0x57	; 87
     c94:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintInteger(bateria1);
     c98:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <bateria1>
     c9c:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <bateria1+0x1>
     ca0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <bateria1+0x2>
     ca4:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <bateria1+0x3>
     ca8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString(" %");
     cac:	89 e0       	ldi	r24, 0x09	; 9
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		// RPM
		GLCD_GotoXY(1,inicio+=12);
     cb4:	6d e0       	ldi	r22, 0x0D	; 13
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintInteger(RPM);
     cbc:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <RPM>
     cc0:	70 91 93 01 	lds	r23, 0x0193	; 0x800193 <RPM+0x1>
     cc4:	07 2e       	mov	r0, r23
     cc6:	00 0c       	add	r0, r0
     cc8:	88 0b       	sbc	r24, r24
     cca:	99 0b       	sbc	r25, r25
     ccc:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString(" RPM");
     cd0:	8c e0       	ldi	r24, 0x0C	; 12
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		// Temperatura da bateria em °C
		GLCD_GotoXY(87,inicio+5);
     cd8:	62 e1       	ldi	r22, 0x12	; 18
     cda:	87 e5       	ldi	r24, 0x57	; 87
     cdc:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintInteger(temperatura1);
     ce0:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <temperatura1>
     ce4:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <temperatura1+0x1>
     ce8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <temperatura1+0x2>
     cec:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <temperatura1+0x3>
     cf0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fixsfsi>
     cf4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString(" C");
     cf8:	81 e1       	ldi	r24, 0x11	; 17
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		// Sonar
		GLCD_GotoXY(1,inicio+=12);
     d00:	69 e1       	ldi	r22, 0x19	; 25
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintString("Sonar: ");
     d08:	84 e1       	ldi	r24, 0x14	; 20
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		GLCD_PrintInteger(distancia_objeto);
     d10:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <distancia_objeto>
     d14:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <distancia_objeto+0x1>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		// Diametro do Pneu
		GLCD_GotoXY(1,inicio+=12);
     d20:	65 e2       	ldi	r22, 0x25	; 37
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintString("D. Pneu: ");
     d28:	8c e1       	ldi	r24, 0x1C	; 28
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		GLCD_PrintInteger(diametro);
     d30:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <diametro>
     d34:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <diametro+0x1>
     d38:	07 2e       	mov	r0, r23
     d3a:	00 0c       	add	r0, r0
     d3c:	88 0b       	sbc	r24, r24
     d3e:	99 0b       	sbc	r25, r25
     d40:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString(" CM");
     d44:	86 e2       	ldi	r24, 0x26	; 38
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		// Distância Percorrida
		GLCD_GotoXY(18,inicio+=14);
     d4c:	63 e3       	ldi	r22, 0x33	; 51
     d4e:	82 e1       	ldi	r24, 0x12	; 18
     d50:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_percorrida);
     d54:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <distancia_percorrida>
     d58:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <distancia_percorrida+0x1>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString("KM");
     d64:	8a e2       	ldi	r24, 0x2A	; 42
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		GLCD_GotoXY(115,inicio);
     d6c:	63 e3       	ldi	r22, 0x33	; 51
     d6e:	83 e7       	ldi	r24, 0x73	; 115
     d70:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		// Indicar a marcha
		if(!(PIND & (1<<7))) // Quando o pino D7 recebe 0, coloca o carro em modo Park
     d74:	4f 99       	sbic	0x09, 7	; 9
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <Display+0x11a>
			GLCD_PrintString("P");
     d78:	8d e2       	ldi	r24, 0x2D	; 45
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		if(PIND & (1<<7)) // Quando o pino D7 recebe 1, ativa o modo R ou D
     d80:	4f 9b       	sbis	0x09, 7	; 9
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <Display+0x126>
		{
		   // quando recebe 0, ativa o modo D
		   GLCD_PrintString("D");
     d84:	8f e2       	ldi	r24, 0x2F	; 47
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		}
		// Envolver os dados do Display com o retângulo
		GLCD_DrawLine(1,10,48,10,GLCD_Black);
     d8c:	0f ef       	ldi	r16, 0xFF	; 255
     d8e:	2a e0       	ldi	r18, 0x0A	; 10
     d90:	40 e3       	ldi	r20, 0x30	; 48
     d92:	6a e0       	ldi	r22, 0x0A	; 10
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	0e 94 06 0b 	call	0x160c	; 0x160c <GLCD_DrawLine>
		GLCD_DrawRectangle(10,inicio-3,60,inicio+10,GLCD_Black);
     d9a:	2d e3       	ldi	r18, 0x3D	; 61
     d9c:	4c e3       	ldi	r20, 0x3C	; 60
     d9e:	60 e3       	ldi	r22, 0x30	; 48
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	0e 94 99 0b 	call	0x1732	; 0x1732 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(110,inicio-3,125,inicio+10,GLCD_Black);
     da6:	2d e3       	ldi	r18, 0x3D	; 61
     da8:	4d e7       	ldi	r20, 0x7D	; 125
     daa:	60 e3       	ldi	r22, 0x30	; 48
     dac:	8e e6       	ldi	r24, 0x6E	; 110
     dae:	0e 94 99 0b 	call	0x1732	; 0x1732 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(80,1,124,30,GLCD_Black); // Não deu certo colocar com a variável inicio
     db2:	2e e1       	ldi	r18, 0x1E	; 30
     db4:	4c e7       	ldi	r20, 0x7C	; 124
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	80 e5       	ldi	r24, 0x50	; 80
     dba:	0e 94 99 0b 	call	0x1732	; 0x1732 <GLCD_DrawRectangle>
		*flag500ms1 = 0;
     dbe:	18 82       	st	Y, r1
	}
	if(*flag500ms1 && (PIND & (1<<7)) && (PIND & (1<<6))) // Condição para quando a marcha ré for engatada 
     dc0:	88 81       	ld	r24, Y
     dc2:	88 23       	and	r24, r24
     dc4:	51 f1       	breq	.+84     	; 0xe1a <Display+0x1b4>
     dc6:	4f 9b       	sbis	0x09, 7	; 9
     dc8:	28 c0       	rjmp	.+80     	; 0xe1a <Display+0x1b4>
     dca:	4e 9b       	sbis	0x09, 6	; 9
     dcc:	26 c0       	rjmp	.+76     	; 0xe1a <Display+0x1b4>
	{
		GLCD_Clear();
     dce:	0e 94 07 0c 	call	0x180e	; 0x180e <GLCD_Clear>
		GLCD_GotoXY(0,0);
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_GotoXY(29,12);
     dda:	6c e0       	ldi	r22, 0x0C	; 12
     ddc:	8d e1       	ldi	r24, 0x1D	; 29
     dde:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintString("SENSOR DE RE");
     de2:	81 e3       	ldi	r24, 0x31	; 49
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		GLCD_GotoXY(45,40);
     dea:	68 e2       	ldi	r22, 0x28	; 40
     dec:	8d e2       	ldi	r24, 0x2D	; 45
     dee:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_objeto); // Sonar
     df2:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <distancia_objeto>
     df6:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <distancia_objeto+0x1>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GLCD_PrintInteger>
		GLCD_PrintString(" CM");
     e02:	86 e2       	ldi	r24, 0x26	; 38
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
		GLCD_DrawRectangle(40,33,84,54,GLCD_Black);
     e0a:	0f ef       	ldi	r16, 0xFF	; 255
     e0c:	26 e3       	ldi	r18, 0x36	; 54
     e0e:	44 e5       	ldi	r20, 0x54	; 84
     e10:	61 e2       	ldi	r22, 0x21	; 33
     e12:	88 e2       	ldi	r24, 0x28	; 40
     e14:	0e 94 99 0b 	call	0x1732	; 0x1732 <GLCD_DrawRectangle>
		*flag500ms1 = 0;
     e18:	18 82       	st	Y, r1
	}
	GLCD_Render();
     e1a:	0e 94 6f 09 	call	0x12de	; 0x12de <GLCD_Render>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <main>:
	Cont++;
}
int main(void)
{
	//Configuração ADC
	ADMUX = 0b01000000; // Vcc com referencia canal PC0
     e26:	80 e4       	ldi	r24, 0x40	; 64
     e28:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA= 0b11101111; // Habilita o AD, habilita interrupção, modo de conversão continua, prescaler = 128
     e2c:	8f ee       	ldi	r24, 0xEF	; 239
     e2e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB= 0b00000000; // Modo de conversão contínua
     e32:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00000000; // habilita pino PC como entrada digitais
     e36:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	DDRC = 0b11110000; // Habilitando o PC0 para o potenciômetro, o PC2 para temperatura e PC1 para a bateria
     e3a:	80 ef       	ldi	r24, 0xF0	; 240
     e3c:	87 b9       	out	0x07, r24	; 7
	// O PC4 e PC5 para o Display
	DDRB = 0b11111110; // Saidas para o LCD
     e3e:	8e ef       	ldi	r24, 0xFE	; 254
     e40:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0b00000010; // Habilitar o modo CTC do CT0
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000011; // liga TC0 com prescaler = 64
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249; // ->  1ms = (249 + 1)*8/16MHz
     e4a:	99 ef       	ldi	r25, 0xF9	; 249
     e4c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b00000010; //Interrupção na igualdade
     e4e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	DDRD &= (1<<2); // Habilita o pino PD2 como entrada
     e52:	8a b1       	in	r24, 0x0a	; 10
     e54:	84 70       	andi	r24, 0x04	; 4
     e56:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2); // Habilita o resistor de pull-up do pino PD2
     e58:	8b b1       	in	r24, 0x0b	; 11
     e5a:	84 60       	ori	r24, 0x04	; 4
     e5c:	8b b9       	out	0x0b, r24	; 11
	DDRD &= (1<<3); // Habilita o pino PD3 como entrada
     e5e:	8a b1       	in	r24, 0x0a	; 10
     e60:	88 70       	andi	r24, 0x08	; 8
     e62:	8a b9       	out	0x0a, r24	; 10
	DDRD &= (1<<4); // Habilita o pino PD4 como entrada
     e64:	8a b1       	in	r24, 0x0a	; 10
     e66:	80 71       	andi	r24, 0x10	; 16
     e68:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<4); // Habilita o resistor de pull-up do pino PD4
     e6a:	8b b1       	in	r24, 0x0b	; 11
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	8b b9       	out	0x0b, r24	; 11
	DDRD &= (1<<5); // Habilita o pino PD4 como entrada
     e70:	8a b1       	in	r24, 0x0a	; 10
     e72:	80 72       	andi	r24, 0x20	; 32
     e74:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<5); // Habilita o resistor de pull-up do pino PD4
     e76:	8b b1       	in	r24, 0x0b	; 11
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8b b9       	out	0x0b, r24	; 11
	EIMSK = 0x01;  // Habilita a intertupção externa INT0 e INT0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	8d bb       	out	0x1d, r24	; 29
	EICRA |= 0x02; // Intertupção externa INT0
     e80:	e9 e6       	ldi	r30, 0x69	; 105
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	80 83       	st	Z, r24
	EICRA |= 0x08; // Intertupção externa INT1
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	80 83       	st	Z, r24
	//intertupção externa
	PCICR  = 0b00000100; // Habilita a interrupção pin change 2 (porta D)
     e90:	84 e0       	ldi	r24, 0x04	; 4
     e92:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0b00110000; // Habilita a interrupção PnChange PD4 e PD5
     e96:	90 e3       	ldi	r25, 0x30	; 48
     e98:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	//Configuração do timer T2 para o modo PWM com prescaler
	TCCR2A = 0b00100011;// Habilita o PWM para o pino PD3
     e9c:	93 e2       	ldi	r25, 0x23	; 35
     e9e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000100;// Configura o prescale para 64
     ea2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR1B = (1<<ICES1)|(1<<CS12); // Captura na borda de subida, TC1 com prescaler = 256
     ea6:	84 e4       	ldi	r24, 0x44	; 68
     ea8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << ICIE1)|(1<<TOIE1); // Habilita a interrupção por captura
     eac:	81 e2       	ldi	r24, 0x21	; 33
     eae:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	USART_Init(MYUBRR); // Chamada da função para inicialização da USART
     eb2:	87 e6       	ldi	r24, 0x67	; 103
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <USART_Init>
	sei(); // Intertupção global
     eba:	78 94       	sei
	// Função da bibilioteca nokia
	GLCD_Setup();
     ebc:	0e 94 a6 09 	call	0x134c	; 0x134c <GLCD_Setup>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	48 e0       	ldi	r20, 0x08	; 8
     ec4:	65 e0       	ldi	r22, 0x05	; 5
     ec6:	88 e6       	ldi	r24, 0x68	; 104
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GLCD_SetFont>
	// Chamada da função para ler a gravação da EEPROM
	Ler_EEPROM();
     ece:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <Ler_EEPROM>
	while (1)
	{
		OCR2B = aceleracao1; // PWM
     ed2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <aceleracao1>
     ed6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		Mostrar_Velocidade(&flag5ms); // Mostrar a velocidade no LCD
     eda:	80 e5       	ldi	r24, 0x50	; 80
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 23 06 	call	0xc46	; 0xc46 <Mostrar_Velocidade>
		Display(&flag500ms); // Mostrar as informações no DISPLAY
     ee2:	8f e4       	ldi	r24, 0x4F	; 79
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	0e 94 33 06 	call	0xc66	; 0xc66 <Display>
		// Gravar os dados na EEPROM
		eeprom_write_word(0,distancia_percorrida);
     eea:	60 91 90 01 	lds	r22, 0x0190	; 0x800190 <distancia_percorrida>
     eee:	70 91 91 01 	lds	r23, 0x0191	; 0x800191 <distancia_percorrida+0x1>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <eeprom_write_word>
		eeprom_write_word(2,diametro);
     efa:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <diametro>
     efe:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <diametro+0x1>
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 7d 11 	call	0x22fa	; 0x22fa <eeprom_write_word>
		eeprom_write_byte(4,temperatura_max);
     f0a:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <temperatura_max>
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 6f 11 	call	0x22de	; 0x22de <eeprom_write_byte>
     f16:	dd cf       	rjmp	.-70     	; 0xed2 <main+0xac>

00000f18 <Shift_reg_bit>:
		Shift_reg_bit(0);
	}
}

void Shift_reg_bit(uint8_t bit){
	PORTA_reg &= !(Shift_reg_clk|Shift_reg_en );	//zerando saída da porta B
     f18:	95 b1       	in	r25, 0x05	; 5
     f1a:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f1c:	91 e2       	ldi	r25, 0x21	; 33
     f1e:	9a 95       	dec	r25
     f20:	f1 f7       	brne	.-4      	; 0xf1e <Shift_reg_bit+0x6>
     f22:	00 00       	nop
	_delay_us(t);
	if(bit){
     f24:	88 23       	and	r24, r24
     f26:	79 f0       	breq	.+30     	; 0xf46 <Shift_reg_bit+0x2e>
		PORTA_reg |= (Shift_reg_en);
     f28:	85 b1       	in	r24, 0x05	; 5
     f2a:	84 60       	ori	r24, 0x04	; 4
     f2c:	85 b9       	out	0x05, r24	; 5
     f2e:	81 e2       	ldi	r24, 0x21	; 33
     f30:	8a 95       	dec	r24
     f32:	f1 f7       	brne	.-4      	; 0xf30 <Shift_reg_bit+0x18>
     f34:	00 00       	nop
		_delay_us(t);
		PORTA_reg |= (Shift_reg_clk)|(Shift_reg_en);
     f36:	85 b1       	in	r24, 0x05	; 5
     f38:	86 60       	ori	r24, 0x06	; 6
     f3a:	85 b9       	out	0x05, r24	; 5
     f3c:	91 e2       	ldi	r25, 0x21	; 33
     f3e:	9a 95       	dec	r25
     f40:	f1 f7       	brne	.-4      	; 0xf3e <Shift_reg_bit+0x26>
     f42:	00 00       	nop
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <Shift_reg_bit+0x3c>
		_delay_us(t);
	}
	else{
		PORTA_reg |= (Shift_reg_clk);
     f46:	85 b1       	in	r24, 0x05	; 5
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	85 b9       	out	0x05, r24	; 5
     f4c:	81 e2       	ldi	r24, 0x21	; 33
     f4e:	8a 95       	dec	r24
     f50:	f1 f7       	brne	.-4      	; 0xf4e <Shift_reg_bit+0x36>
     f52:	00 00       	nop
		_delay_us(t);
	}
	PORTA_reg &= !(Shift_reg_clk|Shift_reg_en );
     f54:	85 b1       	in	r24, 0x05	; 5
     f56:	15 b8       	out	0x05, r1	; 5
     f58:	91 e2       	ldi	r25, 0x21	; 33
     f5a:	9a 95       	dec	r25
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <Shift_reg_bit+0x42>
     f5e:	00 00       	nop
     f60:	08 95       	ret

00000f62 <Shift_reg>:

void Shift_reg_init(){
	DDR_reg |= (Shift_reg_clk|Shift_reg_en);
}

void Shift_reg(uint16_t velocidade_veiculo){
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	ec 01       	movw	r28, r24
	PORTA_reg |= (Shift_reg_clk);	//aplica um pulso de clock
     f6a:	85 b1       	in	r24, 0x05	; 5
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	85 b9       	out	0x05, r24	; 5
     f70:	21 e2       	ldi	r18, 0x21	; 33
     f72:	2a 95       	dec	r18
     f74:	f1 f7       	brne	.-4      	; 0xf72 <Shift_reg+0x10>
     f76:	00 00       	nop
	_delay_us(t);
	PORTA_reg &= !(Shift_reg_clk);
     f78:	85 b1       	in	r24, 0x05	; 5
     f7a:	15 b8       	out	0x05, r1	; 5
     f7c:	31 e2       	ldi	r19, 0x21	; 33
     f7e:	3a 95       	dec	r19
     f80:	f1 f7       	brne	.-4      	; 0xf7e <Shift_reg+0x1c>
     f82:	00 00       	nop
	_delay_us(t);
	Shift_reg_bit(1);		//carrega o segundo bit 1
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
	for(uint8_t i=0;i<4;i++){	//gravando unidade no registrador
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	2a c0       	rjmp	.+84     	; 0xfe2 <Shift_reg+0x80>
		if(((velocidade_veiculo%10)>>i)&(0b1))
     f8e:	9e 01       	movw	r18, r28
     f90:	ad ec       	ldi	r26, 0xCD	; 205
     f92:	bc ec       	ldi	r27, 0xCC	; 204
     f94:	0e 94 c6 10 	call	0x218c	; 0x218c <__umulhisi3>
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	9c 01       	movw	r18, r24
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	82 0f       	add	r24, r18
     fb8:	93 1f       	adc	r25, r19
     fba:	9e 01       	movw	r18, r28
     fbc:	28 1b       	sub	r18, r24
     fbe:	39 0b       	sbc	r19, r25
     fc0:	c9 01       	movw	r24, r18
     fc2:	01 2e       	mov	r0, r17
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <Shift_reg+0x68>
     fc6:	96 95       	lsr	r25
     fc8:	87 95       	ror	r24
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <Shift_reg+0x64>
     fce:	80 ff       	sbrs	r24, 0
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <Shift_reg+0x78>
		Shift_reg_bit(1);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <Shift_reg+0x7e>
		else
		Shift_reg_bit(0);
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
	PORTA_reg |= (Shift_reg_clk);	//aplica um pulso de clock
	_delay_us(t);
	PORTA_reg &= !(Shift_reg_clk);
	_delay_us(t);
	Shift_reg_bit(1);		//carrega o segundo bit 1
	for(uint8_t i=0;i<4;i++){	//gravando unidade no registrador
     fe0:	1f 5f       	subi	r17, 0xFF	; 255
     fe2:	14 30       	cpi	r17, 0x04	; 4
     fe4:	a0 f2       	brcs	.-88     	; 0xf8e <Shift_reg+0x2c>
     fe6:	10 e0       	ldi	r17, 0x00	; 0
     fe8:	34 c0       	rjmp	.+104    	; 0x1052 <Shift_reg+0xf0>
		else
		Shift_reg_bit(0);
	}
	
	for(uint8_t i=0;i<4;i++){	//gravando dezena no registrador
		if((((velocidade_veiculo/10)%10)>>i)&(0b1))
     fea:	9e 01       	movw	r18, r28
     fec:	ad ec       	ldi	r26, 0xCD	; 205
     fee:	bc ec       	ldi	r27, 0xCC	; 204
     ff0:	0e 94 c6 10 	call	0x218c	; 0x218c <__umulhisi3>
     ff4:	ac 01       	movw	r20, r24
     ff6:	56 95       	lsr	r21
     ff8:	47 95       	ror	r20
     ffa:	56 95       	lsr	r21
     ffc:	47 95       	ror	r20
     ffe:	56 95       	lsr	r21
    1000:	47 95       	ror	r20
    1002:	9a 01       	movw	r18, r20
    1004:	0e 94 c6 10 	call	0x218c	; 0x218c <__umulhisi3>
    1008:	96 95       	lsr	r25
    100a:	87 95       	ror	r24
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	96 95       	lsr	r25
    1012:	87 95       	ror	r24
    1014:	9c 01       	movw	r18, r24
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	9a 01       	movw	r18, r20
    102c:	28 1b       	sub	r18, r24
    102e:	39 0b       	sbc	r19, r25
    1030:	c9 01       	movw	r24, r18
    1032:	01 2e       	mov	r0, r17
    1034:	02 c0       	rjmp	.+4      	; 0x103a <Shift_reg+0xd8>
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <Shift_reg+0xd4>
    103e:	80 ff       	sbrs	r24, 0
    1040:	04 c0       	rjmp	.+8      	; 0x104a <Shift_reg+0xe8>
		Shift_reg_bit(1);
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <Shift_reg+0xee>
		else
		Shift_reg_bit(0);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
		Shift_reg_bit(1);
		else
		Shift_reg_bit(0);
	}
	
	for(uint8_t i=0;i<4;i++){	//gravando dezena no registrador
    1050:	1f 5f       	subi	r17, 0xFF	; 255
    1052:	14 30       	cpi	r17, 0x04	; 4
    1054:	50 f2       	brcs	.-108    	; 0xfea <Shift_reg+0x88>
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	1b c0       	rjmp	.+54     	; 0x1090 <Shift_reg+0x12e>
		Shift_reg_bit(1);
		else
		Shift_reg_bit(0);
	}
	for(uint8_t i=0;i<4;i++){	//gravando centena no registrador
		if(((velocidade_veiculo/100)>>i)&(0b1))
    105a:	9e 01       	movw	r18, r28
    105c:	36 95       	lsr	r19
    105e:	27 95       	ror	r18
    1060:	36 95       	lsr	r19
    1062:	27 95       	ror	r18
    1064:	ab e7       	ldi	r26, 0x7B	; 123
    1066:	b4 e1       	ldi	r27, 0x14	; 20
    1068:	0e 94 c6 10 	call	0x218c	; 0x218c <__umulhisi3>
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	01 2e       	mov	r0, r17
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <Shift_reg+0x116>
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <Shift_reg+0x112>
    107c:	80 ff       	sbrs	r24, 0
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <Shift_reg+0x126>
		Shift_reg_bit(1);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
    1086:	03 c0       	rjmp	.+6      	; 0x108e <Shift_reg+0x12c>
		else
		Shift_reg_bit(0);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 8c 07 	call	0xf18	; 0xf18 <Shift_reg_bit>
		if((((velocidade_veiculo/10)%10)>>i)&(0b1))
		Shift_reg_bit(1);
		else
		Shift_reg_bit(0);
	}
	for(uint8_t i=0;i<4;i++){	//gravando centena no registrador
    108e:	1f 5f       	subi	r17, 0xFF	; 255
    1090:	14 30       	cpi	r17, 0x04	; 4
    1092:	18 f3       	brcs	.-58     	; 0x105a <Shift_reg+0xf8>
		if(((velocidade_veiculo/100)>>i)&(0b1))
		Shift_reg_bit(1);
		else
		Shift_reg_bit(0);
	}
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	08 95       	ret

0000109c <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
    109c:	66 95       	lsr	r22
    109e:	66 95       	lsr	r22
    10a0:	66 95       	lsr	r22
    10a2:	e8 2f       	mov	r30, r24
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	68 9f       	mul	r22, r24
    10aa:	e0 0d       	add	r30, r0
    10ac:	f1 1d       	adc	r31, r1
    10ae:	11 24       	eor	r1, r1
    10b0:	e3 56       	subi	r30, 0x63	; 99
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	40 83       	st	Z, r20
    10b6:	08 95       	ret

000010b8 <GLCD_BufferRead>:
    10b8:	66 95       	lsr	r22
    10ba:	66 95       	lsr	r22
    10bc:	66 95       	lsr	r22
    10be:	e8 2f       	mov	r30, r24
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	68 9f       	mul	r22, r24
    10c6:	e0 0d       	add	r30, r0
    10c8:	f1 1d       	adc	r31, r1
    10ca:	11 24       	eor	r1, r1
    10cc:	e3 56       	subi	r30, 0x63	; 99
    10ce:	fe 4f       	sbci	r31, 0xFE	; 254
    10d0:	80 81       	ld	r24, Z
    10d2:	08 95       	ret

000010d4 <Int2bcd>:
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	fa 01       	movw	r30, r20
    10de:	20 e3       	ldi	r18, 0x30	; 48
    10e0:	22 87       	std	Z+10, r18	; 0x0a
    10e2:	21 87       	std	Z+9, r18	; 0x09
    10e4:	20 87       	std	Z+8, r18	; 0x08
    10e6:	27 83       	std	Z+7, r18	; 0x07
    10e8:	26 83       	std	Z+6, r18	; 0x06
    10ea:	25 83       	std	Z+5, r18	; 0x05
    10ec:	24 83       	std	Z+4, r18	; 0x04
    10ee:	23 83       	std	Z+3, r18	; 0x03
    10f0:	22 83       	std	Z+2, r18	; 0x02
    10f2:	21 83       	std	Z+1, r18	; 0x01
    10f4:	20 83       	st	Z, r18
    10f6:	bb 23       	and	r27, r27
    10f8:	4c f4       	brge	.+18     	; 0x110c <Int2bcd+0x38>
    10fa:	b0 95       	com	r27
    10fc:	a0 95       	com	r26
    10fe:	90 95       	com	r25
    1100:	81 95       	neg	r24
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	af 4f       	sbci	r26, 0xFF	; 255
    1106:	bf 4f       	sbci	r27, 0xFF	; 255
    1108:	31 e0       	ldi	r19, 0x01	; 1
    110a:	08 c0       	rjmp	.+16     	; 0x111c <Int2bcd+0x48>
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	06 c0       	rjmp	.+12     	; 0x111c <Int2bcd+0x48>
    1110:	9a 5c       	subi	r25, 0xCA	; 202
    1112:	aa 49       	sbci	r26, 0x9A	; 154
    1114:	bb 43       	sbci	r27, 0x3B	; 59
    1116:	21 81       	ldd	r18, Z+1	; 0x01
    1118:	2f 5f       	subi	r18, 0xFF	; 255
    111a:	21 83       	std	Z+1, r18	; 0x01
    111c:	81 15       	cp	r24, r1
    111e:	2a ec       	ldi	r18, 0xCA	; 202
    1120:	92 07       	cpc	r25, r18
    1122:	2a e9       	ldi	r18, 0x9A	; 154
    1124:	a2 07       	cpc	r26, r18
    1126:	2b e3       	ldi	r18, 0x3B	; 59
    1128:	b2 07       	cpc	r27, r18
    112a:	94 f7       	brge	.-28     	; 0x1110 <Int2bcd+0x3c>
    112c:	06 c0       	rjmp	.+12     	; 0x113a <Int2bcd+0x66>
    112e:	91 5e       	subi	r25, 0xE1	; 225
    1130:	a5 4f       	sbci	r26, 0xF5	; 245
    1132:	b5 40       	sbci	r27, 0x05	; 5
    1134:	22 81       	ldd	r18, Z+2	; 0x02
    1136:	2f 5f       	subi	r18, 0xFF	; 255
    1138:	22 83       	std	Z+2, r18	; 0x02
    113a:	81 15       	cp	r24, r1
    113c:	21 ee       	ldi	r18, 0xE1	; 225
    113e:	92 07       	cpc	r25, r18
    1140:	25 ef       	ldi	r18, 0xF5	; 245
    1142:	a2 07       	cpc	r26, r18
    1144:	25 e0       	ldi	r18, 0x05	; 5
    1146:	b2 07       	cpc	r27, r18
    1148:	94 f7       	brge	.-28     	; 0x112e <Int2bcd+0x5a>
    114a:	07 c0       	rjmp	.+14     	; 0x115a <Int2bcd+0x86>
    114c:	80 58       	subi	r24, 0x80	; 128
    114e:	96 49       	sbci	r25, 0x96	; 150
    1150:	a8 49       	sbci	r26, 0x98	; 152
    1152:	b1 09       	sbc	r27, r1
    1154:	23 81       	ldd	r18, Z+3	; 0x03
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	23 83       	std	Z+3, r18	; 0x03
    115a:	80 38       	cpi	r24, 0x80	; 128
    115c:	26 e9       	ldi	r18, 0x96	; 150
    115e:	92 07       	cpc	r25, r18
    1160:	28 e9       	ldi	r18, 0x98	; 152
    1162:	a2 07       	cpc	r26, r18
    1164:	b1 05       	cpc	r27, r1
    1166:	94 f7       	brge	.-28     	; 0x114c <Int2bcd+0x78>
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <Int2bcd+0xa4>
    116a:	80 54       	subi	r24, 0x40	; 64
    116c:	92 44       	sbci	r25, 0x42	; 66
    116e:	af 40       	sbci	r26, 0x0F	; 15
    1170:	b1 09       	sbc	r27, r1
    1172:	24 81       	ldd	r18, Z+4	; 0x04
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	24 83       	std	Z+4, r18	; 0x04
    1178:	80 34       	cpi	r24, 0x40	; 64
    117a:	22 e4       	ldi	r18, 0x42	; 66
    117c:	92 07       	cpc	r25, r18
    117e:	2f e0       	ldi	r18, 0x0F	; 15
    1180:	a2 07       	cpc	r26, r18
    1182:	b1 05       	cpc	r27, r1
    1184:	94 f7       	brge	.-28     	; 0x116a <Int2bcd+0x96>
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <Int2bcd+0xc2>
    1188:	80 5a       	subi	r24, 0xA0	; 160
    118a:	96 48       	sbci	r25, 0x86	; 134
    118c:	a1 40       	sbci	r26, 0x01	; 1
    118e:	b1 09       	sbc	r27, r1
    1190:	25 81       	ldd	r18, Z+5	; 0x05
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	25 83       	std	Z+5, r18	; 0x05
    1196:	80 3a       	cpi	r24, 0xA0	; 160
    1198:	26 e8       	ldi	r18, 0x86	; 134
    119a:	92 07       	cpc	r25, r18
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	a2 07       	cpc	r26, r18
    11a0:	b1 05       	cpc	r27, r1
    11a2:	94 f7       	brge	.-28     	; 0x1188 <Int2bcd+0xb4>
    11a4:	07 c0       	rjmp	.+14     	; 0x11b4 <Int2bcd+0xe0>
    11a6:	80 51       	subi	r24, 0x10	; 16
    11a8:	97 42       	sbci	r25, 0x27	; 39
    11aa:	a1 09       	sbc	r26, r1
    11ac:	b1 09       	sbc	r27, r1
    11ae:	26 81       	ldd	r18, Z+6	; 0x06
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	26 83       	std	Z+6, r18	; 0x06
    11b4:	80 31       	cpi	r24, 0x10	; 16
    11b6:	27 e2       	ldi	r18, 0x27	; 39
    11b8:	92 07       	cpc	r25, r18
    11ba:	a1 05       	cpc	r26, r1
    11bc:	b1 05       	cpc	r27, r1
    11be:	9c f7       	brge	.-26     	; 0x11a6 <Int2bcd+0xd2>
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <Int2bcd+0xfc>
    11c2:	88 5e       	subi	r24, 0xE8	; 232
    11c4:	93 40       	sbci	r25, 0x03	; 3
    11c6:	a1 09       	sbc	r26, r1
    11c8:	b1 09       	sbc	r27, r1
    11ca:	27 81       	ldd	r18, Z+7	; 0x07
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	27 83       	std	Z+7, r18	; 0x07
    11d0:	88 3e       	cpi	r24, 0xE8	; 232
    11d2:	23 e0       	ldi	r18, 0x03	; 3
    11d4:	92 07       	cpc	r25, r18
    11d6:	a1 05       	cpc	r26, r1
    11d8:	b1 05       	cpc	r27, r1
    11da:	9c f7       	brge	.-26     	; 0x11c2 <Int2bcd+0xee>
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <Int2bcd+0x118>
    11de:	84 56       	subi	r24, 0x64	; 100
    11e0:	91 09       	sbc	r25, r1
    11e2:	a1 09       	sbc	r26, r1
    11e4:	b1 09       	sbc	r27, r1
    11e6:	20 85       	ldd	r18, Z+8	; 0x08
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	20 87       	std	Z+8, r18	; 0x08
    11ec:	84 36       	cpi	r24, 0x64	; 100
    11ee:	91 05       	cpc	r25, r1
    11f0:	a1 05       	cpc	r26, r1
    11f2:	b1 05       	cpc	r27, r1
    11f4:	a4 f7       	brge	.-24     	; 0x11de <Int2bcd+0x10a>
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <Int2bcd+0x130>
    11f8:	0a 97       	sbiw	r24, 0x0a	; 10
    11fa:	a1 09       	sbc	r26, r1
    11fc:	b1 09       	sbc	r27, r1
    11fe:	21 85       	ldd	r18, Z+9	; 0x09
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	21 87       	std	Z+9, r18	; 0x09
    1204:	8a 30       	cpi	r24, 0x0A	; 10
    1206:	91 05       	cpc	r25, r1
    1208:	a1 05       	cpc	r26, r1
    120a:	b1 05       	cpc	r27, r1
    120c:	ac f7       	brge	.-22     	; 0x11f8 <Int2bcd+0x124>
    120e:	06 c0       	rjmp	.+12     	; 0x121c <Int2bcd+0x148>
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	a1 09       	sbc	r26, r1
    1214:	b1 09       	sbc	r27, r1
    1216:	22 85       	ldd	r18, Z+10	; 0x0a
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	22 87       	std	Z+10, r18	; 0x0a
    121c:	18 16       	cp	r1, r24
    121e:	19 06       	cpc	r1, r25
    1220:	1a 06       	cpc	r1, r26
    1222:	1b 06       	cpc	r1, r27
    1224:	ac f3       	brlt	.-22     	; 0x1210 <Int2bcd+0x13c>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	01 c0       	rjmp	.+2      	; 0x122c <Int2bcd+0x158>
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	df 01       	movw	r26, r30
    122e:	a2 0f       	add	r26, r18
    1230:	b1 1d       	adc	r27, r1
    1232:	8c 91       	ld	r24, X
    1234:	80 33       	cpi	r24, 0x30	; 48
    1236:	c9 f3       	breq	.-14     	; 0x122a <Int2bcd+0x156>
    1238:	33 23       	and	r19, r19
    123a:	31 f0       	breq	.+12     	; 0x1248 <Int2bcd+0x174>
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	df 01       	movw	r26, r30
    1240:	a2 0f       	add	r26, r18
    1242:	b1 1d       	adc	r27, r1
    1244:	8d e2       	ldi	r24, 0x2D	; 45
    1246:	8c 93       	st	X, r24
    1248:	4a e0       	ldi	r20, 0x0A	; 10
    124a:	42 1b       	sub	r20, r18
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	0d c0       	rjmp	.+26     	; 0x126a <Int2bcd+0x196>
    1250:	83 2f       	mov	r24, r19
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	ef 01       	movw	r28, r30
    1256:	c8 0f       	add	r28, r24
    1258:	d9 1f       	adc	r29, r25
    125a:	82 0f       	add	r24, r18
    125c:	91 1d       	adc	r25, r1
    125e:	df 01       	movw	r26, r30
    1260:	a8 0f       	add	r26, r24
    1262:	b9 1f       	adc	r27, r25
    1264:	8c 91       	ld	r24, X
    1266:	88 83       	st	Y, r24
    1268:	3f 5f       	subi	r19, 0xFF	; 255
    126a:	43 17       	cp	r20, r19
    126c:	88 f7       	brcc	.-30     	; 0x1250 <Int2bcd+0x17c>
    126e:	e3 0f       	add	r30, r19
    1270:	f1 1d       	adc	r31, r1
    1272:	10 82       	st	Z, r1
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <GLCD_Send>:
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	c8 2f       	mov	r28, r24
    1284:	8b 01       	movw	r16, r22
    1286:	d4 2f       	mov	r29, r20
    1288:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TWI_BeginTransmission>
    128c:	88 e7       	ldi	r24, 0x78	; 120
    128e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TWI_Transmit>
    1292:	8c 2f       	mov	r24, r28
    1294:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TWI_Transmit>
    1298:	c0 e0       	ldi	r28, 0x00	; 0
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <GLCD_Send+0x30>
    129c:	f8 01       	movw	r30, r16
    129e:	ec 0f       	add	r30, r28
    12a0:	f1 1d       	adc	r31, r1
    12a2:	80 81       	ld	r24, Z
    12a4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TWI_Transmit>
    12a8:	cf 5f       	subi	r28, 0xFF	; 255
    12aa:	cd 17       	cp	r28, r29
    12ac:	b8 f3       	brcs	.-18     	; 0x129c <GLCD_Send+0x22>
    12ae:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TWI_EndTransmission>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <GLCD_SendCommand>:
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	1f 92       	push	r1
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	41 e0       	ldi	r20, 0x01	; 1
    12ca:	be 01       	movw	r22, r28
    12cc:	6f 5f       	subi	r22, 0xFF	; 255
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	0e 94 3d 09 	call	0x127a	; 0x127a <GLCD_Send>
    12d6:	0f 90       	pop	r0
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <GLCD_Render>:
    12de:	cf 93       	push	r28
    12e0:	81 e2       	ldi	r24, 0x21	; 33
    12e2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    12ec:	8f e7       	ldi	r24, 0x7F	; 127
    12ee:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    12f2:	82 e2       	ldi	r24, 0x22	; 34
    12f4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1304:	c0 e0       	ldi	r28, 0x00	; 0
    1306:	0b c0       	rjmp	.+22     	; 0x131e <GLCD_Render+0x40>
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	c8 9f       	mul	r28, r24
    130c:	b0 01       	movw	r22, r0
    130e:	11 24       	eor	r1, r1
    1310:	63 56       	subi	r22, 0x63	; 99
    1312:	7e 4f       	sbci	r23, 0xFE	; 254
    1314:	40 e1       	ldi	r20, 0x10	; 16
    1316:	80 e4       	ldi	r24, 0x40	; 64
    1318:	0e 94 3d 09 	call	0x127a	; 0x127a <GLCD_Send>
    131c:	cf 5f       	subi	r28, 0xFF	; 255
    131e:	c0 34       	cpi	r28, 0x40	; 64
    1320:	98 f3       	brcs	.-26     	; 0x1308 <GLCD_Render+0x2a>
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <GLCD_GotoX>:
    1326:	88 23       	and	r24, r24
    1328:	14 f0       	brlt	.+4      	; 0x132e <GLCD_GotoX+0x8>
    132a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__GLCD>
    132e:	08 95       	ret

00001330 <GLCD_GotoY>:
    1330:	80 34       	cpi	r24, 0x40	; 64
    1332:	10 f4       	brcc	.+4      	; 0x1338 <GLCD_GotoY+0x8>
    1334:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <__GLCD+0x1>
    1338:	08 95       	ret

0000133a <GLCD_GotoXY>:
    133a:	cf 93       	push	r28
    133c:	c6 2f       	mov	r28, r22
    133e:	0e 94 93 09 	call	0x1326	; 0x1326 <GLCD_GotoX>
    1342:	8c 2f       	mov	r24, r28
    1344:	0e 94 98 09 	call	0x1330	; 0x1330 <GLCD_GotoY>
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <GLCD_Setup>:
    134c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <TWI_Setup>
    1350:	8e ea       	ldi	r24, 0xAE	; 174
    1352:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1356:	85 ed       	ldi	r24, 0xD5	; 213
    1358:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    135c:	80 ef       	ldi	r24, 0xF0	; 240
    135e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1362:	88 ea       	ldi	r24, 0xA8	; 168
    1364:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1368:	8f e3       	ldi	r24, 0x3F	; 63
    136a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    136e:	83 ed       	ldi	r24, 0xD3	; 211
    1370:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    137a:	8d e8       	ldi	r24, 0x8D	; 141
    137c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1380:	84 e1       	ldi	r24, 0x14	; 20
    1382:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1386:	80 e4       	ldi	r24, 0x40	; 64
    1388:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    1398:	81 ea       	ldi	r24, 0xA1	; 161
    139a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    139e:	88 ec       	ldi	r24, 0xC8	; 200
    13a0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13a4:	8a ed       	ldi	r24, 0xDA	; 218
    13a6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13aa:	82 e1       	ldi	r24, 0x12	; 18
    13ac:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13b0:	81 e8       	ldi	r24, 0x81	; 129
    13b2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13bc:	89 ed       	ldi	r24, 0xD9	; 217
    13be:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13c2:	81 ef       	ldi	r24, 0xF1	; 241
    13c4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13c8:	8b ed       	ldi	r24, 0xDB	; 219
    13ca:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13ce:	80 e2       	ldi	r24, 0x20	; 32
    13d0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13d4:	84 ea       	ldi	r24, 0xA4	; 164
    13d6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13da:	86 ea       	ldi	r24, 0xA6	; 166
    13dc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13e0:	8e e2       	ldi	r24, 0x2E	; 46
    13e2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13e6:	8f ea       	ldi	r24, 0xAF	; 175
    13e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <GLCD_SendCommand>
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    13f4:	e4 e9       	ldi	r30, 0x94	; 148
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	86 ea       	ldi	r24, 0xA6	; 166
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	17 82       	std	Z+7, r1	; 0x07
    13fe:	16 82       	std	Z+6, r1	; 0x06
    1400:	15 82       	std	Z+5, r1	; 0x05
    1402:	11 82       	std	Z+1, r1	; 0x01
    1404:	10 82       	st	Z, r1
    1406:	08 95       	ret

00001408 <GLCD_SetPixel>:
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	c6 2f       	mov	r28, r22
    1414:	14 2f       	mov	r17, r20
    1416:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    141a:	e4 e9       	ldi	r30, 0x94	; 148
    141c:	f1 e0       	ldi	r31, 0x01	; 1
    141e:	f1 80       	ldd	r15, Z+1	; 0x01
    1420:	d0 81       	ld	r29, Z
    1422:	6f 2d       	mov	r22, r15
    1424:	8d 2f       	mov	r24, r29
    1426:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GLCD_BufferRead>
    142a:	1f 3f       	cpi	r17, 0xFF	; 255
    142c:	79 f4       	brne	.+30     	; 0x144c <GLCD_SetPixel+0x44>
    142e:	c7 70       	andi	r28, 0x07	; 7
    1430:	01 e0       	ldi	r16, 0x01	; 1
    1432:	10 e0       	ldi	r17, 0x00	; 0
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <GLCD_SetPixel+0x3a>
    143a:	00 0f       	add	r16, r16
    143c:	11 1f       	adc	r17, r17
    143e:	22 1f       	adc	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	ca 95       	dec	r28
    1444:	d2 f7       	brpl	.-12     	; 0x143a <GLCD_SetPixel+0x32>
    1446:	48 2f       	mov	r20, r24
    1448:	40 2b       	or	r20, r16
    144a:	0f c0       	rjmp	.+30     	; 0x146a <GLCD_SetPixel+0x62>
    144c:	c7 70       	andi	r28, 0x07	; 7
    144e:	01 e0       	ldi	r16, 0x01	; 1
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <GLCD_SetPixel+0x58>
    1458:	00 0f       	add	r16, r16
    145a:	11 1f       	adc	r17, r17
    145c:	22 1f       	adc	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	ca 95       	dec	r28
    1462:	d2 f7       	brpl	.-12     	; 0x1458 <GLCD_SetPixel+0x50>
    1464:	00 95       	com	r16
    1466:	40 2f       	mov	r20, r16
    1468:	48 23       	and	r20, r24
    146a:	6f 2d       	mov	r22, r15
    146c:	8d 2f       	mov	r24, r29
    146e:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	08 95       	ret

0000147e <GLCD_SetPixels>:
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	88 23       	and	r24, r24
    149c:	0c f4       	brge	.+2      	; 0x14a0 <GLCD_SetPixels+0x22>
    149e:	a7 c0       	rjmp	.+334    	; 0x15ee <GLCD_SetPixels+0x170>
    14a0:	44 23       	and	r20, r20
    14a2:	0c f4       	brge	.+2      	; 0x14a6 <GLCD_SetPixels+0x28>
    14a4:	a4 c0       	rjmp	.+328    	; 0x15ee <GLCD_SetPixels+0x170>
    14a6:	60 34       	cpi	r22, 0x40	; 64
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <GLCD_SetPixels+0x2e>
    14aa:	a1 c0       	rjmp	.+322    	; 0x15ee <GLCD_SetPixels+0x170>
    14ac:	20 34       	cpi	r18, 0x40	; 64
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <GLCD_SetPixels+0x34>
    14b0:	9e c0       	rjmp	.+316    	; 0x15ee <GLCD_SetPixels+0x170>
    14b2:	26 1b       	sub	r18, r22
    14b4:	99 24       	eor	r9, r9
    14b6:	93 94       	inc	r9
    14b8:	92 0e       	add	r9, r18
    14ba:	48 1b       	sub	r20, r24
    14bc:	d1 e0       	ldi	r29, 0x01	; 1
    14be:	d4 0f       	add	r29, r20
    14c0:	96 2f       	mov	r25, r22
    14c2:	97 70       	andi	r25, 0x07	; 7
    14c4:	16 2f       	mov	r17, r22
    14c6:	19 1b       	sub	r17, r25
    14c8:	e9 2c       	mov	r14, r9
    14ca:	f1 2c       	mov	r15, r1
    14cc:	28 e0       	ldi	r18, 0x08	; 8
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	29 1b       	sub	r18, r25
    14d2:	31 09       	sbc	r19, r1
    14d4:	e2 16       	cp	r14, r18
    14d6:	f3 06       	cpc	r15, r19
    14d8:	7c f4       	brge	.+30     	; 0x14f8 <GLCD_SetPixels+0x7a>
    14da:	28 e0       	ldi	r18, 0x08	; 8
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	2e 19       	sub	r18, r14
    14e0:	3f 09       	sbc	r19, r15
    14e2:	4f ef       	ldi	r20, 0xFF	; 255
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	6a 01       	movw	r12, r20
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GLCD_SetPixels+0x70>
    14ea:	d5 94       	asr	r13
    14ec:	c7 94       	ror	r12
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GLCD_SetPixels+0x6c>
    14f2:	2c 2d       	mov	r18, r12
    14f4:	b9 2c       	mov	r11, r9
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <GLCD_SetPixels+0x82>
    14f8:	28 e0       	ldi	r18, 0x08	; 8
    14fa:	b2 2e       	mov	r11, r18
    14fc:	b9 1a       	sub	r11, r25
    14fe:	2f ef       	ldi	r18, 0xFF	; 255
    1500:	a8 2e       	mov	r10, r24
    1502:	c2 2e       	mov	r12, r18
    1504:	d1 2c       	mov	r13, r1
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GLCD_SetPixels+0x8e>
    1508:	cc 0c       	add	r12, r12
    150a:	dd 1c       	adc	r13, r13
    150c:	9a 95       	dec	r25
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GLCD_SetPixels+0x8a>
    1510:	6c 2c       	mov	r6, r12
    1512:	61 2f       	mov	r22, r17
    1514:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    1518:	81 2c       	mov	r8, r1
    151a:	19 c0       	rjmp	.+50     	; 0x154e <GLCD_SetPixels+0xd0>
    151c:	e4 e9       	ldi	r30, 0x94	; 148
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	71 80       	ldd	r7, Z+1	; 0x01
    1522:	c0 81       	ld	r28, Z
    1524:	67 2d       	mov	r22, r7
    1526:	8c 2f       	mov	r24, r28
    1528:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GLCD_BufferRead>
    152c:	0f 3f       	cpi	r16, 0xFF	; 255
    152e:	19 f4       	brne	.+6      	; 0x1536 <GLCD_SetPixels+0xb8>
    1530:	46 2d       	mov	r20, r6
    1532:	48 2b       	or	r20, r24
    1534:	03 c0       	rjmp	.+6      	; 0x153c <GLCD_SetPixels+0xbe>
    1536:	4c 2d       	mov	r20, r12
    1538:	40 95       	com	r20
    153a:	48 23       	and	r20, r24
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	8c 0f       	add	r24, r28
    1540:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__GLCD>
    1544:	67 2d       	mov	r22, r7
    1546:	8c 2f       	mov	r24, r28
    1548:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    154c:	83 94       	inc	r8
    154e:	8d 16       	cp	r8, r29
    1550:	28 f3       	brcs	.-54     	; 0x151c <GLCD_SetPixels+0x9e>
    1552:	16 c0       	rjmp	.+44     	; 0x1580 <GLCD_SetPixels+0x102>
    1554:	88 e0       	ldi	r24, 0x08	; 8
    1556:	b8 0e       	add	r11, r24
    1558:	18 5f       	subi	r17, 0xF8	; 248
    155a:	61 2f       	mov	r22, r17
    155c:	8a 2d       	mov	r24, r10
    155e:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    1562:	c0 e0       	ldi	r28, 0x00	; 0
    1564:	0b c0       	rjmp	.+22     	; 0x157c <GLCD_SetPixels+0xfe>
    1566:	e4 e9       	ldi	r30, 0x94	; 148
    1568:	f1 e0       	ldi	r31, 0x01	; 1
    156a:	61 81       	ldd	r22, Z+1	; 0x01
    156c:	80 81       	ld	r24, Z
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	98 0f       	add	r25, r24
    1572:	90 83       	st	Z, r25
    1574:	40 2f       	mov	r20, r16
    1576:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    157a:	cf 5f       	subi	r28, 0xFF	; 255
    157c:	cd 17       	cp	r28, r29
    157e:	98 f3       	brcs	.-26     	; 0x1566 <GLCD_SetPixels+0xe8>
    1580:	8b 2d       	mov	r24, r11
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c 01       	movw	r18, r24
    1586:	28 5f       	subi	r18, 0xF8	; 248
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	e2 16       	cp	r14, r18
    158c:	f3 06       	cpc	r15, r19
    158e:	14 f7       	brge	.-60     	; 0x1554 <GLCD_SetPixels+0xd6>
    1590:	b9 14       	cp	r11, r9
    1592:	68 f5       	brcc	.+90     	; 0x15ee <GLCD_SetPixels+0x170>
    1594:	e8 1a       	sub	r14, r24
    1596:	f9 0a       	sbc	r15, r25
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GLCD_SetPixels+0x124>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	ea 94       	dec	r14
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GLCD_SetPixels+0x120>
    15a6:	e8 2e       	mov	r14, r24
    15a8:	e0 94       	com	r14
    15aa:	68 e0       	ldi	r22, 0x08	; 8
    15ac:	61 0f       	add	r22, r17
    15ae:	8a 2d       	mov	r24, r10
    15b0:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	19 c0       	rjmp	.+50     	; 0x15ea <GLCD_SetPixels+0x16c>
    15b8:	e4 e9       	ldi	r30, 0x94	; 148
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	f1 80       	ldd	r15, Z+1	; 0x01
    15be:	c0 81       	ld	r28, Z
    15c0:	6f 2d       	mov	r22, r15
    15c2:	8c 2f       	mov	r24, r28
    15c4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GLCD_BufferRead>
    15c8:	0f 3f       	cpi	r16, 0xFF	; 255
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <GLCD_SetPixels+0x154>
    15cc:	4e 2d       	mov	r20, r14
    15ce:	48 2b       	or	r20, r24
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <GLCD_SetPixels+0x15a>
    15d2:	4e 2d       	mov	r20, r14
    15d4:	40 95       	com	r20
    15d6:	48 23       	and	r20, r24
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	8c 0f       	add	r24, r28
    15dc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__GLCD>
    15e0:	6f 2d       	mov	r22, r15
    15e2:	8c 2f       	mov	r24, r28
    15e4:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    15e8:	1f 5f       	subi	r17, 0xFF	; 255
    15ea:	1d 17       	cp	r17, r29
    15ec:	28 f3       	brcs	.-54     	; 0x15b8 <GLCD_SetPixels+0x13a>
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	7f 90       	pop	r7
    1608:	6f 90       	pop	r6
    160a:	08 95       	ret

0000160c <GLCD_DrawLine>:
    160c:	8f 92       	push	r8
    160e:	9f 92       	push	r9
    1610:	af 92       	push	r10
    1612:	bf 92       	push	r11
    1614:	cf 92       	push	r12
    1616:	df 92       	push	r13
    1618:	ef 92       	push	r14
    161a:	ff 92       	push	r15
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	c8 2f       	mov	r28, r24
    1626:	d6 2f       	mov	r29, r22
    1628:	14 2f       	mov	r17, r20
    162a:	88 23       	and	r24, r24
    162c:	0c f4       	brge	.+2      	; 0x1630 <GLCD_DrawLine+0x24>
    162e:	74 c0       	rjmp	.+232    	; 0x1718 <GLCD_DrawLine+0x10c>
    1630:	44 23       	and	r20, r20
    1632:	0c f4       	brge	.+2      	; 0x1636 <GLCD_DrawLine+0x2a>
    1634:	71 c0       	rjmp	.+226    	; 0x1718 <GLCD_DrawLine+0x10c>
    1636:	60 34       	cpi	r22, 0x40	; 64
    1638:	08 f0       	brcs	.+2      	; 0x163c <GLCD_DrawLine+0x30>
    163a:	6e c0       	rjmp	.+220    	; 0x1718 <GLCD_DrawLine+0x10c>
    163c:	20 34       	cpi	r18, 0x40	; 64
    163e:	08 f0       	brcs	.+2      	; 0x1642 <GLCD_DrawLine+0x36>
    1640:	6b c0       	rjmp	.+214    	; 0x1718 <GLCD_DrawLine+0x10c>
    1642:	84 13       	cpse	r24, r20
    1644:	0a c0       	rjmp	.+20     	; 0x165a <GLCD_DrawLine+0x4e>
    1646:	26 17       	cp	r18, r22
    1648:	10 f4       	brcc	.+4      	; 0x164e <GLCD_DrawLine+0x42>
    164a:	d2 2f       	mov	r29, r18
    164c:	26 2f       	mov	r18, r22
    164e:	4c 2f       	mov	r20, r28
    1650:	6d 2f       	mov	r22, r29
    1652:	8c 2f       	mov	r24, r28
    1654:	0e 94 3f 0a 	call	0x147e	; 0x147e <GLCD_SetPixels>
    1658:	5f c0       	rjmp	.+190    	; 0x1718 <GLCD_DrawLine+0x10c>
    165a:	62 13       	cpse	r22, r18
    165c:	0e c0       	rjmp	.+28     	; 0x167a <GLCD_DrawLine+0x6e>
    165e:	48 17       	cp	r20, r24
    1660:	48 f4       	brcc	.+18     	; 0x1674 <GLCD_DrawLine+0x68>
    1662:	c4 2f       	mov	r28, r20
    1664:	18 2f       	mov	r17, r24
    1666:	06 c0       	rjmp	.+12     	; 0x1674 <GLCD_DrawLine+0x68>
    1668:	40 2f       	mov	r20, r16
    166a:	6d 2f       	mov	r22, r29
    166c:	8c 2f       	mov	r24, r28
    166e:	0e 94 04 0a 	call	0x1408	; 0x1408 <GLCD_SetPixel>
    1672:	cf 5f       	subi	r28, 0xFF	; 255
    1674:	1c 17       	cp	r17, r28
    1676:	c0 f7       	brcc	.-16     	; 0x1668 <GLCD_DrawLine+0x5c>
    1678:	4f c0       	rjmp	.+158    	; 0x1718 <GLCD_DrawLine+0x10c>
    167a:	26 17       	cp	r18, r22
    167c:	28 f4       	brcc	.+10     	; 0x1688 <GLCD_DrawLine+0x7c>
    167e:	c6 2e       	mov	r12, r22
    1680:	d1 2c       	mov	r13, r1
    1682:	c2 1a       	sub	r12, r18
    1684:	d1 08       	sbc	r13, r1
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <GLCD_DrawLine+0x84>
    1688:	c2 2e       	mov	r12, r18
    168a:	d1 2c       	mov	r13, r1
    168c:	c6 1a       	sub	r12, r22
    168e:	d1 08       	sbc	r13, r1
    1690:	1c 17       	cp	r17, r28
    1692:	28 f4       	brcc	.+10     	; 0x169e <GLCD_DrawLine+0x92>
    1694:	ac 2e       	mov	r10, r28
    1696:	b1 2c       	mov	r11, r1
    1698:	a1 1a       	sub	r10, r17
    169a:	b1 08       	sbc	r11, r1
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <GLCD_DrawLine+0x9a>
    169e:	a1 2e       	mov	r10, r17
    16a0:	b1 2c       	mov	r11, r1
    16a2:	ac 1a       	sub	r10, r28
    16a4:	b1 08       	sbc	r11, r1
    16a6:	ac 14       	cp	r10, r12
    16a8:	bd 04       	cpc	r11, r13
    16aa:	34 f4       	brge	.+12     	; 0x16b8 <GLCD_DrawLine+0xac>
    16ac:	81 2f       	mov	r24, r17
    16ae:	12 2f       	mov	r17, r18
    16b0:	28 2f       	mov	r18, r24
    16b2:	8c 2f       	mov	r24, r28
    16b4:	cd 2f       	mov	r28, r29
    16b6:	d8 2f       	mov	r29, r24
    16b8:	1c 17       	cp	r17, r28
    16ba:	30 f4       	brcc	.+12     	; 0x16c8 <GLCD_DrawLine+0xbc>
    16bc:	8d 2f       	mov	r24, r29
    16be:	d2 2f       	mov	r29, r18
    16c0:	28 2f       	mov	r18, r24
    16c2:	8c 2f       	mov	r24, r28
    16c4:	c1 2f       	mov	r28, r17
    16c6:	18 2f       	mov	r17, r24
    16c8:	91 2e       	mov	r9, r17
    16ca:	9c 1a       	sub	r9, r28
    16cc:	d2 17       	cp	r29, r18
    16ce:	18 f4       	brcc	.+6      	; 0x16d6 <GLCD_DrawLine+0xca>
    16d0:	e2 2e       	mov	r14, r18
    16d2:	ed 1a       	sub	r14, r29
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <GLCD_DrawLine+0xce>
    16d6:	ed 2e       	mov	r14, r29
    16d8:	e2 1a       	sub	r14, r18
    16da:	f9 2c       	mov	r15, r9
    16dc:	f6 94       	lsr	r15
    16de:	d2 17       	cp	r29, r18
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <GLCD_DrawLine+0xdc>
    16e2:	88 24       	eor	r8, r8
    16e4:	83 94       	inc	r8
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <GLCD_DrawLine+0x108>
    16e8:	88 24       	eor	r8, r8
    16ea:	8a 94       	dec	r8
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <GLCD_DrawLine+0x108>
    16ee:	ac 14       	cp	r10, r12
    16f0:	bd 04       	cpc	r11, r13
    16f2:	34 f4       	brge	.+12     	; 0x1700 <GLCD_DrawLine+0xf4>
    16f4:	40 2f       	mov	r20, r16
    16f6:	6c 2f       	mov	r22, r28
    16f8:	8d 2f       	mov	r24, r29
    16fa:	0e 94 04 0a 	call	0x1408	; 0x1408 <GLCD_SetPixel>
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <GLCD_DrawLine+0xfe>
    1700:	40 2f       	mov	r20, r16
    1702:	6d 2f       	mov	r22, r29
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 04 0a 	call	0x1408	; 0x1408 <GLCD_SetPixel>
    170a:	fe 18       	sub	r15, r14
    170c:	12 f4       	brpl	.+4      	; 0x1712 <GLCD_DrawLine+0x106>
    170e:	d8 0d       	add	r29, r8
    1710:	f9 0c       	add	r15, r9
    1712:	cf 5f       	subi	r28, 0xFF	; 255
    1714:	1c 17       	cp	r17, r28
    1716:	58 f7       	brcc	.-42     	; 0x16ee <GLCD_DrawLine+0xe2>
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	08 95       	ret

00001732 <GLCD_DrawRectangle>:
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	88 23       	and	r24, r24
    1742:	0c f4       	brge	.+2      	; 0x1746 <GLCD_DrawRectangle+0x14>
    1744:	45 c0       	rjmp	.+138    	; 0x17d0 <GLCD_DrawRectangle+0x9e>
    1746:	44 23       	and	r20, r20
    1748:	0c f4       	brge	.+2      	; 0x174c <GLCD_DrawRectangle+0x1a>
    174a:	42 c0       	rjmp	.+132    	; 0x17d0 <GLCD_DrawRectangle+0x9e>
    174c:	60 34       	cpi	r22, 0x40	; 64
    174e:	08 f0       	brcs	.+2      	; 0x1752 <GLCD_DrawRectangle+0x20>
    1750:	3f c0       	rjmp	.+126    	; 0x17d0 <GLCD_DrawRectangle+0x9e>
    1752:	20 34       	cpi	r18, 0x40	; 64
    1754:	e8 f5       	brcc	.+122    	; 0x17d0 <GLCD_DrawRectangle+0x9e>
    1756:	d0 2f       	mov	r29, r16
    1758:	12 2f       	mov	r17, r18
    175a:	d4 2e       	mov	r13, r20
    175c:	f6 2e       	mov	r15, r22
    175e:	e8 2e       	mov	r14, r24
    1760:	48 17       	cp	r20, r24
    1762:	18 f0       	brcs	.+6      	; 0x176a <GLCD_DrawRectangle+0x38>
    1764:	04 2f       	mov	r16, r20
    1766:	c8 2f       	mov	r28, r24
    1768:	09 c0       	rjmp	.+18     	; 0x177c <GLCD_DrawRectangle+0x4a>
    176a:	08 2f       	mov	r16, r24
    176c:	c4 2f       	mov	r28, r20
    176e:	06 c0       	rjmp	.+12     	; 0x177c <GLCD_DrawRectangle+0x4a>
    1770:	4d 2f       	mov	r20, r29
    1772:	6f 2d       	mov	r22, r15
    1774:	8c 2f       	mov	r24, r28
    1776:	0e 94 04 0a 	call	0x1408	; 0x1408 <GLCD_SetPixel>
    177a:	cf 5f       	subi	r28, 0xFF	; 255
    177c:	0c 17       	cp	r16, r28
    177e:	c0 f7       	brcc	.-16     	; 0x1770 <GLCD_DrawRectangle+0x3e>
    1780:	de 14       	cp	r13, r14
    1782:	18 f0       	brcs	.+6      	; 0x178a <GLCD_DrawRectangle+0x58>
    1784:	0d 2d       	mov	r16, r13
    1786:	ce 2d       	mov	r28, r14
    1788:	09 c0       	rjmp	.+18     	; 0x179c <GLCD_DrawRectangle+0x6a>
    178a:	0e 2d       	mov	r16, r14
    178c:	cd 2d       	mov	r28, r13
    178e:	06 c0       	rjmp	.+12     	; 0x179c <GLCD_DrawRectangle+0x6a>
    1790:	4d 2f       	mov	r20, r29
    1792:	61 2f       	mov	r22, r17
    1794:	8c 2f       	mov	r24, r28
    1796:	0e 94 04 0a 	call	0x1408	; 0x1408 <GLCD_SetPixel>
    179a:	cf 5f       	subi	r28, 0xFF	; 255
    179c:	0c 17       	cp	r16, r28
    179e:	c0 f7       	brcc	.-16     	; 0x1790 <GLCD_DrawRectangle+0x5e>
    17a0:	1f 15       	cp	r17, r15
    17a2:	18 f0       	brcs	.+6      	; 0x17aa <GLCD_DrawRectangle+0x78>
    17a4:	21 2f       	mov	r18, r17
    17a6:	6f 2d       	mov	r22, r15
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <GLCD_DrawRectangle+0x7c>
    17aa:	2f 2d       	mov	r18, r15
    17ac:	61 2f       	mov	r22, r17
    17ae:	0d 2f       	mov	r16, r29
    17b0:	4e 2d       	mov	r20, r14
    17b2:	8e 2d       	mov	r24, r14
    17b4:	0e 94 3f 0a 	call	0x147e	; 0x147e <GLCD_SetPixels>
    17b8:	1f 15       	cp	r17, r15
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <GLCD_DrawRectangle+0x90>
    17bc:	21 2f       	mov	r18, r17
    17be:	6f 2d       	mov	r22, r15
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <GLCD_DrawRectangle+0x94>
    17c2:	2f 2d       	mov	r18, r15
    17c4:	61 2f       	mov	r22, r17
    17c6:	0d 2f       	mov	r16, r29
    17c8:	4d 2d       	mov	r20, r13
    17ca:	8d 2d       	mov	r24, r13
    17cc:	0e 94 3f 0a 	call	0x147e	; 0x147e <GLCD_SetPixels>
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	08 95       	ret

000017e0 <GLCD_FillScreen>:
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	18 2f       	mov	r17, r24
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <GLCD_FillScreen+0x22>
    17ec:	41 2f       	mov	r20, r17
    17ee:	6d 2f       	mov	r22, r29
    17f0:	8c 2f       	mov	r24, r28
    17f2:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    17f6:	cf 5f       	subi	r28, 0xFF	; 255
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <GLCD_FillScreen+0x1c>
    17fa:	c0 e0       	ldi	r28, 0x00	; 0
    17fc:	cc 23       	and	r28, r28
    17fe:	b4 f7       	brge	.-20     	; 0x17ec <GLCD_FillScreen+0xc>
    1800:	d8 5f       	subi	r29, 0xF8	; 248
    1802:	d0 34       	cpi	r29, 0x40	; 64
    1804:	d0 f3       	brcs	.-12     	; 0x17fa <GLCD_FillScreen+0x1a>
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	08 95       	ret

0000180e <GLCD_Clear>:
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <GLCD_FillScreen>
    1814:	08 95       	ret

00001816 <GLCD_SetFont>:
    1816:	66 23       	and	r22, r22
    1818:	e4 f0       	brlt	.+56     	; 0x1852 <GLCD_SetFont+0x3c>
    181a:	40 34       	cpi	r20, 0x40	; 64
    181c:	d0 f4       	brcc	.+52     	; 0x1852 <GLCD_SetFont+0x3c>
    181e:	22 30       	cpi	r18, 0x02	; 2
    1820:	c0 f4       	brcc	.+48     	; 0x1852 <GLCD_SetFont+0x3c>
    1822:	e4 e9       	ldi	r30, 0x94	; 148
    1824:	f1 e0       	ldi	r31, 0x01	; 1
    1826:	94 83       	std	Z+4, r25	; 0x04
    1828:	83 83       	std	Z+3, r24	; 0x03
    182a:	65 83       	std	Z+5, r22	; 0x05
    182c:	46 83       	std	Z+6, r20	; 0x06
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	41 50       	subi	r20, 0x01	; 1
    1832:	51 09       	sbc	r21, r1
    1834:	ca 01       	movw	r24, r20
    1836:	99 23       	and	r25, r25
    1838:	0c f4       	brge	.+2      	; 0x183c <GLCD_SetFont+0x26>
    183a:	07 96       	adiw	r24, 0x07	; 7
    183c:	95 95       	asr	r25
    183e:	87 95       	ror	r24
    1840:	95 95       	asr	r25
    1842:	87 95       	ror	r24
    1844:	95 95       	asr	r25
    1846:	87 95       	ror	r24
    1848:	e4 e9       	ldi	r30, 0x94	; 148
    184a:	f1 e0       	ldi	r31, 0x01	; 1
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	87 83       	std	Z+7, r24	; 0x07
    1850:	20 87       	std	Z+8, r18	; 0x08
    1852:	08 95       	ret

00001854 <GLCD_PrintChar>:
    1854:	4f 92       	push	r4
    1856:	5f 92       	push	r5
    1858:	6f 92       	push	r6
    185a:	7f 92       	push	r7
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	a4 e9       	ldi	r26, 0x94	; 148
    1876:	b1 e0       	ldi	r27, 0x01	; 1
    1878:	5c 90       	ld	r5, X
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	4c 90       	ld	r4, X
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	80 52       	subi	r24, 0x20	; 32
    1882:	15 96       	adiw	r26, 0x05	; 5
    1884:	9c 91       	ld	r25, X
    1886:	15 97       	sbiw	r26, 0x05	; 5
    1888:	17 96       	adiw	r26, 0x07	; 7
    188a:	2c 91       	ld	r18, X
    188c:	17 97       	sbiw	r26, 0x07	; 7
    188e:	92 9f       	mul	r25, r18
    1890:	90 01       	movw	r18, r0
    1892:	11 24       	eor	r1, r1
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	82 9f       	mul	r24, r18
    189a:	a0 01       	movw	r20, r0
    189c:	83 9f       	mul	r24, r19
    189e:	50 0d       	add	r21, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	13 96       	adiw	r26, 0x03	; 3
    18a4:	ed 91       	ld	r30, X+
    18a6:	fc 91       	ld	r31, X
    18a8:	14 97       	sbiw	r26, 0x04	; 4
    18aa:	5a 01       	movw	r10, r20
    18ac:	8f ef       	ldi	r24, 0xFF	; 255
    18ae:	a8 1a       	sub	r10, r24
    18b0:	b8 0a       	sbc	r11, r24
    18b2:	e4 0f       	add	r30, r20
    18b4:	f5 1f       	adc	r31, r21
    18b6:	74 90       	lpm	r7, Z
    18b8:	84 2d       	mov	r24, r4
    18ba:	87 70       	andi	r24, 0x07	; 7
    18bc:	98 2e       	mov	r9, r24
    18be:	64 2c       	mov	r6, r4
    18c0:	81 2c       	mov	r8, r1
    18c2:	5f c0       	rjmp	.+190    	; 0x1982 <GLCD_PrintChar+0x12e>
    18c4:	66 2d       	mov	r22, r6
    18c6:	85 2d       	mov	r24, r5
    18c8:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    18cc:	75 01       	movw	r14, r10
    18ce:	e8 0c       	add	r14, r8
    18d0:	f1 1c       	adc	r15, r1
    18d2:	67 01       	movw	r12, r14
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	c8 1a       	sub	r12, r24
    18d8:	d1 08       	sbc	r13, r1
    18da:	10 e0       	ldi	r17, 0x00	; 0
    18dc:	41 c0       	rjmp	.+130    	; 0x1960 <GLCD_PrintChar+0x10c>
    18de:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <__GLCD+0x3>
    18e2:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <__GLCD+0x4>
    18e6:	fc 01       	movw	r30, r24
    18e8:	ee 0d       	add	r30, r14
    18ea:	ff 1d       	adc	r31, r15
    18ec:	24 91       	lpm	r18, Z
    18ee:	49 2d       	mov	r20, r9
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	09 2c       	mov	r0, r9
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <GLCD_PrintChar+0xa8>
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <GLCD_PrintChar+0xa4>
    1900:	02 2f       	mov	r16, r18
    1902:	88 20       	and	r8, r8
    1904:	a1 f0       	breq	.+40     	; 0x192e <GLCD_PrintChar+0xda>
    1906:	fc 01       	movw	r30, r24
    1908:	ec 0d       	add	r30, r12
    190a:	fd 1d       	adc	r31, r13
    190c:	e4 91       	lpm	r30, Z
    190e:	88 e0       	ldi	r24, 0x08	; 8
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	84 1b       	sub	r24, r20
    1914:	95 0b       	sbc	r25, r21
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GLCD_PrintChar+0xca>
    191a:	f5 95       	asr	r31
    191c:	e7 95       	ror	r30
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GLCD_PrintChar+0xc6>
    1922:	0e 2f       	mov	r16, r30
    1924:	02 2b       	or	r16, r18
    1926:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__GLCD+0x7>
    192a:	c8 0e       	add	r12, r24
    192c:	d1 1c       	adc	r13, r1
    192e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__GLCD+0x8>
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	39 f4       	brne	.+14     	; 0x1944 <GLCD_PrintChar+0xf0>
    1936:	e4 e9       	ldi	r30, 0x94	; 148
    1938:	f1 e0       	ldi	r31, 0x01	; 1
    193a:	61 81       	ldd	r22, Z+1	; 0x01
    193c:	80 81       	ld	r24, Z
    193e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GLCD_BufferRead>
    1942:	08 2b       	or	r16, r24
    1944:	c4 e9       	ldi	r28, 0x94	; 148
    1946:	d1 e0       	ldi	r29, 0x01	; 1
    1948:	69 81       	ldd	r22, Y+1	; 0x01
    194a:	88 81       	ld	r24, Y
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	98 0f       	add	r25, r24
    1950:	98 83       	st	Y, r25
    1952:	40 2f       	mov	r20, r16
    1954:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    1958:	8f 81       	ldd	r24, Y+7	; 0x07
    195a:	e8 0e       	add	r14, r24
    195c:	f1 1c       	adc	r15, r1
    195e:	1f 5f       	subi	r17, 0xFF	; 255
    1960:	17 15       	cp	r17, r7
    1962:	08 f4       	brcc	.+2      	; 0x1966 <GLCD_PrintChar+0x112>
    1964:	bc cf       	rjmp	.-136    	; 0x18de <GLCD_PrintChar+0x8a>
    1966:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__GLCD+0x8>
    196a:	81 11       	cpse	r24, r1
    196c:	07 c0       	rjmp	.+14     	; 0x197c <GLCD_PrintChar+0x128>
    196e:	e4 e9       	ldi	r30, 0x94	; 148
    1970:	f1 e0       	ldi	r31, 0x01	; 1
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	61 81       	ldd	r22, Z+1	; 0x01
    1976:	80 81       	ld	r24, Z
    1978:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    197c:	88 e0       	ldi	r24, 0x08	; 8
    197e:	68 0e       	add	r6, r24
    1980:	83 94       	inc	r8
    1982:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__GLCD+0x7>
    1986:	88 16       	cp	r8, r24
    1988:	08 f4       	brcc	.+2      	; 0x198c <GLCD_PrintChar+0x138>
    198a:	9c cf       	rjmp	.-200    	; 0x18c4 <GLCD_PrintChar+0x70>
    198c:	24 2d       	mov	r18, r4
    198e:	26 95       	lsr	r18
    1990:	26 95       	lsr	r18
    1992:	26 95       	lsr	r18
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__GLCD+0x6>
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	84 0d       	add	r24, r4
    199e:	91 1d       	adc	r25, r1
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	ac 01       	movw	r20, r24
    19a4:	12 f4       	brpl	.+4      	; 0x19aa <GLCD_PrintChar+0x156>
    19a6:	49 5f       	subi	r20, 0xF9	; 249
    19a8:	5f 4f       	sbci	r21, 0xFF	; 255
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	55 95       	asr	r21
    19b4:	47 95       	ror	r20
    19b6:	24 17       	cp	r18, r20
    19b8:	35 07       	cpc	r19, r21
    19ba:	09 f4       	brne	.+2      	; 0x19be <GLCD_PrintChar+0x16a>
    19bc:	45 c0       	rjmp	.+138    	; 0x1a48 <GLCD_PrintChar+0x1f4>
    19be:	8f e3       	ldi	r24, 0x3F	; 63
    19c0:	86 15       	cp	r24, r6
    19c2:	08 f4       	brcc	.+2      	; 0x19c6 <GLCD_PrintChar+0x172>
    19c4:	41 c0       	rjmp	.+130    	; 0x1a48 <GLCD_PrintChar+0x1f4>
    19c6:	66 2d       	mov	r22, r6
    19c8:	85 2d       	mov	r24, r5
    19ca:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    19ce:	a8 0c       	add	r10, r8
    19d0:	b1 1c       	adc	r11, r1
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	a8 1a       	sub	r10, r24
    19d6:	b1 08       	sbc	r11, r1
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	29 c0       	rjmp	.+82     	; 0x1a2e <GLCD_PrintChar+0x1da>
    19dc:	c4 e9       	ldi	r28, 0x94	; 148
    19de:	d1 e0       	ldi	r29, 0x01	; 1
    19e0:	f9 80       	ldd	r15, Y+1	; 0x01
    19e2:	18 81       	ld	r17, Y
    19e4:	6f 2d       	mov	r22, r15
    19e6:	81 2f       	mov	r24, r17
    19e8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GLCD_BufferRead>
    19ec:	eb 81       	ldd	r30, Y+3	; 0x03
    19ee:	fc 81       	ldd	r31, Y+4	; 0x04
    19f0:	ea 0d       	add	r30, r10
    19f2:	fb 1d       	adc	r31, r11
    19f4:	44 91       	lpm	r20, Z
    19f6:	28 e0       	ldi	r18, 0x08	; 8
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	29 19       	sub	r18, r9
    19fc:	31 09       	sbc	r19, r1
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GLCD_PrintChar+0x1b2>
    1a02:	55 95       	asr	r21
    1a04:	47 95       	ror	r20
    1a06:	2a 95       	dec	r18
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GLCD_PrintChar+0x1ae>
    1a0a:	48 2b       	or	r20, r24
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	91 30       	cpi	r25, 0x01	; 1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <GLCD_PrintChar+0x1c0>
    1a12:	48 2b       	or	r20, r24
    1a14:	c4 e9       	ldi	r28, 0x94	; 148
    1a16:	d1 e0       	ldi	r29, 0x01	; 1
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	81 0f       	add	r24, r17
    1a1c:	88 83       	st	Y, r24
    1a1e:	6f 2d       	mov	r22, r15
    1a20:	81 2f       	mov	r24, r17
    1a22:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    1a26:	8f 81       	ldd	r24, Y+7	; 0x07
    1a28:	a8 0e       	add	r10, r24
    1a2a:	b1 1c       	adc	r11, r1
    1a2c:	0f 5f       	subi	r16, 0xFF	; 255
    1a2e:	07 15       	cp	r16, r7
    1a30:	a8 f2       	brcs	.-86     	; 0x19dc <GLCD_PrintChar+0x188>
    1a32:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__GLCD+0x8>
    1a36:	81 11       	cpse	r24, r1
    1a38:	07 c0       	rjmp	.+14     	; 0x1a48 <GLCD_PrintChar+0x1f4>
    1a3a:	e4 e9       	ldi	r30, 0x94	; 148
    1a3c:	f1 e0       	ldi	r31, 0x01	; 1
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	61 81       	ldd	r22, Z+1	; 0x01
    1a42:	80 81       	ld	r24, Z
    1a44:	0e 94 4e 08 	call	0x109c	; 0x109c <GLCD_BufferWrite>
    1a48:	85 2d       	mov	r24, r5
    1a4a:	87 0d       	add	r24, r7
    1a4c:	64 2d       	mov	r22, r4
    1a4e:	8f 5f       	subi	r24, 0xFF	; 255
    1a50:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_GotoXY>
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	4f 90       	pop	r4
    1a74:	08 95       	ret

00001a76 <GLCD_PrintString>:
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <GLCD_PrintString+0x22>
    1a7e:	e4 e9       	ldi	r30, 0x94	; 148
    1a80:	f1 e0       	ldi	r31, 0x01	; 1
    1a82:	90 81       	ld	r25, Z
    1a84:	25 81       	ldd	r18, Z+5	; 0x05
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	29 0f       	add	r18, r25
    1a8a:	31 1d       	adc	r19, r1
    1a8c:	20 38       	cpi	r18, 0x80	; 128
    1a8e:	31 05       	cpc	r19, r1
    1a90:	34 f4       	brge	.+12     	; 0x1a9e <GLCD_PrintString+0x28>
    1a92:	21 96       	adiw	r28, 0x01	; 1
    1a94:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GLCD_PrintChar>
    1a98:	88 81       	ld	r24, Y
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	f0 cf       	rjmp	.-32     	; 0x1a7e <GLCD_PrintString+0x8>
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    1abc:	61 15       	cp	r22, r1
    1abe:	71 05       	cpc	r23, r1
    1ac0:	81 05       	cpc	r24, r1
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    1ac6:	80 e3       	ldi	r24, 0x30	; 48
    1ac8:	0e 94 2a 0c 	call	0x1854	; 0x1854 <GLCD_PrintChar>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    1ace:	61 15       	cp	r22, r1
    1ad0:	71 05       	cpc	r23, r1
    1ad2:	81 05       	cpc	r24, r1
    1ad4:	20 e8       	ldi	r18, 0x80	; 128
    1ad6:	92 07       	cpc	r25, r18
    1ad8:	71 f0       	breq	.+28     	; 0x1af6 <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    1ada:	8e 01       	movw	r16, r28
    1adc:	0f 5f       	subi	r16, 0xFF	; 255
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	2c e0       	ldi	r18, 0x0C	; 12
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	11 92       	st	Z+, r1
    1ae6:	2a 95       	dec	r18
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    1aea:	a8 01       	movw	r20, r16
    1aec:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    1af0:	c8 01       	movw	r24, r16
    1af2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <GLCD_PrintString>
	}
}
    1af6:	2c 96       	adiw	r28, 0x0c	; 12
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	de bf       	out	0x3e, r29	; 62
    1afe:	0f be       	out	0x3f, r0	; 63
    1b00:	cd bf       	out	0x3d, r28	; 61
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	08 95       	ret

00001b0c <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    1b0c:	87 b1       	in	r24, 0x07	; 7
    1b0e:	80 61       	ori	r24, 0x10	; 16
    1b10:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    1b12:	87 b1       	in	r24, 0x07	; 7
    1b14:	80 62       	ori	r24, 0x20	; 32
    1b16:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    1b18:	88 b1       	in	r24, 0x08	; 8
    1b1a:	80 61       	ori	r24, 0x10	; 16
    1b1c:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    1b1e:	88 b1       	in	r24, 0x08	; 8
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    1b24:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    1b28:	88 e4       	ldi	r24, 0x48	; 72
    1b2a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    1b2e:	84 e0       	ldi	r24, 0x04	; 4
    1b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b34:	08 95       	ret

00001b36 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    1b36:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    1b3a:	88 7f       	andi	r24, 0xF8	; 248
    1b3c:	08 95       	ret

00001b3e <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1b3e:	84 ea       	ldi	r24, 0xA4	; 164
    1b40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    1b44:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b48:	88 23       	and	r24, r24
    1b4a:	e4 f7       	brge	.-8      	; 0x1b44 <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    1b4c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <TWI_Status>
}
    1b50:	08 95       	ret

00001b52 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1b52:	85 ed       	ldi	r24, 0xD5	; 213
    1b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    1b58:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b5c:	84 fd       	sbrc	r24, 4
    1b5e:	fc cf       	rjmp	.-8      	; 0x1b58 <TWI_EndTransmission+0x6>
}
    1b60:	08 95       	ret

00001b62 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    1b62:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b66:	84 e8       	ldi	r24, 0x84	; 132
    1b68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    1b6c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1b70:	88 23       	and	r24, r24
    1b72:	e4 f7       	brge	.-8      	; 0x1b6c <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    1b74:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <TWI_Status>
}
    1b78:	08 95       	ret

00001b7a <__subsf3>:
    1b7a:	50 58       	subi	r21, 0x80	; 128

00001b7c <__addsf3>:
    1b7c:	bb 27       	eor	r27, r27
    1b7e:	aa 27       	eor	r26, r26
    1b80:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__addsf3x>
    1b84:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__fp_round>
    1b88:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscA>
    1b8c:	38 f0       	brcs	.+14     	; 0x1b9c <__addsf3+0x20>
    1b8e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__addsf3+0x20>
    1b94:	39 f4       	brne	.+14     	; 0x1ba4 <__addsf3+0x28>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	19 f4       	brne	.+6      	; 0x1ba0 <__addsf3+0x24>
    1b9a:	26 f4       	brtc	.+8      	; 0x1ba4 <__addsf3+0x28>
    1b9c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    1ba0:	0e f4       	brtc	.+2      	; 0x1ba4 <__addsf3+0x28>
    1ba2:	e0 95       	com	r30
    1ba4:	e7 fb       	bst	r30, 7
    1ba6:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>

00001baa <__addsf3x>:
    1baa:	e9 2f       	mov	r30, r25
    1bac:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_split3>
    1bb0:	58 f3       	brcs	.-42     	; 0x1b88 <__addsf3+0xc>
    1bb2:	ba 17       	cp	r27, r26
    1bb4:	62 07       	cpc	r22, r18
    1bb6:	73 07       	cpc	r23, r19
    1bb8:	84 07       	cpc	r24, r20
    1bba:	95 07       	cpc	r25, r21
    1bbc:	20 f0       	brcs	.+8      	; 0x1bc6 <__addsf3x+0x1c>
    1bbe:	79 f4       	brne	.+30     	; 0x1bde <__addsf3x+0x34>
    1bc0:	a6 f5       	brtc	.+104    	; 0x1c2a <__addsf3x+0x80>
    1bc2:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_zero>
    1bc6:	0e f4       	brtc	.+2      	; 0x1bca <__addsf3x+0x20>
    1bc8:	e0 95       	com	r30
    1bca:	0b 2e       	mov	r0, r27
    1bcc:	ba 2f       	mov	r27, r26
    1bce:	a0 2d       	mov	r26, r0
    1bd0:	0b 01       	movw	r0, r22
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	90 01       	movw	r18, r0
    1bd6:	0c 01       	movw	r0, r24
    1bd8:	ca 01       	movw	r24, r20
    1bda:	a0 01       	movw	r20, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	ff 27       	eor	r31, r31
    1be0:	59 1b       	sub	r21, r25
    1be2:	99 f0       	breq	.+38     	; 0x1c0a <__addsf3x+0x60>
    1be4:	59 3f       	cpi	r21, 0xF9	; 249
    1be6:	50 f4       	brcc	.+20     	; 0x1bfc <__addsf3x+0x52>
    1be8:	50 3e       	cpi	r21, 0xE0	; 224
    1bea:	68 f1       	brcs	.+90     	; 0x1c46 <__addsf3x+0x9c>
    1bec:	1a 16       	cp	r1, r26
    1bee:	f0 40       	sbci	r31, 0x00	; 0
    1bf0:	a2 2f       	mov	r26, r18
    1bf2:	23 2f       	mov	r18, r19
    1bf4:	34 2f       	mov	r19, r20
    1bf6:	44 27       	eor	r20, r20
    1bf8:	58 5f       	subi	r21, 0xF8	; 248
    1bfa:	f3 cf       	rjmp	.-26     	; 0x1be2 <__addsf3x+0x38>
    1bfc:	46 95       	lsr	r20
    1bfe:	37 95       	ror	r19
    1c00:	27 95       	ror	r18
    1c02:	a7 95       	ror	r26
    1c04:	f0 40       	sbci	r31, 0x00	; 0
    1c06:	53 95       	inc	r21
    1c08:	c9 f7       	brne	.-14     	; 0x1bfc <__addsf3x+0x52>
    1c0a:	7e f4       	brtc	.+30     	; 0x1c2a <__addsf3x+0x80>
    1c0c:	1f 16       	cp	r1, r31
    1c0e:	ba 0b       	sbc	r27, r26
    1c10:	62 0b       	sbc	r22, r18
    1c12:	73 0b       	sbc	r23, r19
    1c14:	84 0b       	sbc	r24, r20
    1c16:	ba f0       	brmi	.+46     	; 0x1c46 <__addsf3x+0x9c>
    1c18:	91 50       	subi	r25, 0x01	; 1
    1c1a:	a1 f0       	breq	.+40     	; 0x1c44 <__addsf3x+0x9a>
    1c1c:	ff 0f       	add	r31, r31
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	66 1f       	adc	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	c2 f7       	brpl	.-16     	; 0x1c18 <__addsf3x+0x6e>
    1c28:	0e c0       	rjmp	.+28     	; 0x1c46 <__addsf3x+0x9c>
    1c2a:	ba 0f       	add	r27, r26
    1c2c:	62 1f       	adc	r22, r18
    1c2e:	73 1f       	adc	r23, r19
    1c30:	84 1f       	adc	r24, r20
    1c32:	48 f4       	brcc	.+18     	; 0x1c46 <__addsf3x+0x9c>
    1c34:	87 95       	ror	r24
    1c36:	77 95       	ror	r23
    1c38:	67 95       	ror	r22
    1c3a:	b7 95       	ror	r27
    1c3c:	f7 95       	ror	r31
    1c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__addsf3x+0x9a>
    1c42:	b0 cf       	rjmp	.-160    	; 0x1ba4 <__addsf3+0x28>
    1c44:	93 95       	inc	r25
    1c46:	88 0f       	add	r24, r24
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <__addsf3x+0xa2>
    1c4a:	99 27       	eor	r25, r25
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	97 95       	ror	r25
    1c50:	87 95       	ror	r24
    1c52:	08 95       	ret

00001c54 <__cmpsf2>:
    1c54:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_cmp>
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <__cmpsf2+0x8>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	08 95       	ret

00001c5e <__divsf3>:
    1c5e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__divsf3x>
    1c62:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__fp_round>
    1c66:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_pscB>
    1c6a:	58 f0       	brcs	.+22     	; 0x1c82 <__divsf3+0x24>
    1c6c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscA>
    1c70:	40 f0       	brcs	.+16     	; 0x1c82 <__divsf3+0x24>
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <__divsf3+0x20>
    1c74:	5f 3f       	cpi	r21, 0xFF	; 255
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <__divsf3+0x24>
    1c78:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    1c7c:	51 11       	cpse	r21, r1
    1c7e:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_szero>
    1c82:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>

00001c86 <__divsf3x>:
    1c86:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_split3>
    1c8a:	68 f3       	brcs	.-38     	; 0x1c66 <__divsf3+0x8>

00001c8c <__divsf3_pse>:
    1c8c:	99 23       	and	r25, r25
    1c8e:	b1 f3       	breq	.-20     	; 0x1c7c <__divsf3+0x1e>
    1c90:	55 23       	and	r21, r21
    1c92:	91 f3       	breq	.-28     	; 0x1c78 <__divsf3+0x1a>
    1c94:	95 1b       	sub	r25, r21
    1c96:	55 0b       	sbc	r21, r21
    1c98:	bb 27       	eor	r27, r27
    1c9a:	aa 27       	eor	r26, r26
    1c9c:	62 17       	cp	r22, r18
    1c9e:	73 07       	cpc	r23, r19
    1ca0:	84 07       	cpc	r24, r20
    1ca2:	38 f0       	brcs	.+14     	; 0x1cb2 <__divsf3_pse+0x26>
    1ca4:	9f 5f       	subi	r25, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	44 1f       	adc	r20, r20
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	a9 f3       	breq	.-22     	; 0x1c9c <__divsf3_pse+0x10>
    1cb2:	35 d0       	rcall	.+106    	; 0x1d1e <__divsf3_pse+0x92>
    1cb4:	0e 2e       	mov	r0, r30
    1cb6:	3a f0       	brmi	.+14     	; 0x1cc6 <__divsf3_pse+0x3a>
    1cb8:	e0 e8       	ldi	r30, 0x80	; 128
    1cba:	32 d0       	rcall	.+100    	; 0x1d20 <__divsf3_pse+0x94>
    1cbc:	91 50       	subi	r25, 0x01	; 1
    1cbe:	50 40       	sbci	r21, 0x00	; 0
    1cc0:	e6 95       	lsr	r30
    1cc2:	00 1c       	adc	r0, r0
    1cc4:	ca f7       	brpl	.-14     	; 0x1cb8 <__divsf3_pse+0x2c>
    1cc6:	2b d0       	rcall	.+86     	; 0x1d1e <__divsf3_pse+0x92>
    1cc8:	fe 2f       	mov	r31, r30
    1cca:	29 d0       	rcall	.+82     	; 0x1d1e <__divsf3_pse+0x92>
    1ccc:	66 0f       	add	r22, r22
    1cce:	77 1f       	adc	r23, r23
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	26 17       	cp	r18, r22
    1cd6:	37 07       	cpc	r19, r23
    1cd8:	48 07       	cpc	r20, r24
    1cda:	ab 07       	cpc	r26, r27
    1cdc:	b0 e8       	ldi	r27, 0x80	; 128
    1cde:	09 f0       	breq	.+2      	; 0x1ce2 <__divsf3_pse+0x56>
    1ce0:	bb 0b       	sbc	r27, r27
    1ce2:	80 2d       	mov	r24, r0
    1ce4:	bf 01       	movw	r22, r30
    1ce6:	ff 27       	eor	r31, r31
    1ce8:	93 58       	subi	r25, 0x83	; 131
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	3a f0       	brmi	.+14     	; 0x1cfc <__divsf3_pse+0x70>
    1cee:	9e 3f       	cpi	r25, 0xFE	; 254
    1cf0:	51 05       	cpc	r21, r1
    1cf2:	78 f0       	brcs	.+30     	; 0x1d12 <__divsf3_pse+0x86>
    1cf4:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    1cf8:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_szero>
    1cfc:	5f 3f       	cpi	r21, 0xFF	; 255
    1cfe:	e4 f3       	brlt	.-8      	; 0x1cf8 <__divsf3_pse+0x6c>
    1d00:	98 3e       	cpi	r25, 0xE8	; 232
    1d02:	d4 f3       	brlt	.-12     	; 0x1cf8 <__divsf3_pse+0x6c>
    1d04:	86 95       	lsr	r24
    1d06:	77 95       	ror	r23
    1d08:	67 95       	ror	r22
    1d0a:	b7 95       	ror	r27
    1d0c:	f7 95       	ror	r31
    1d0e:	9f 5f       	subi	r25, 0xFF	; 255
    1d10:	c9 f7       	brne	.-14     	; 0x1d04 <__divsf3_pse+0x78>
    1d12:	88 0f       	add	r24, r24
    1d14:	91 1d       	adc	r25, r1
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret
    1d1e:	e1 e0       	ldi	r30, 0x01	; 1
    1d20:	66 0f       	add	r22, r22
    1d22:	77 1f       	adc	r23, r23
    1d24:	88 1f       	adc	r24, r24
    1d26:	bb 1f       	adc	r27, r27
    1d28:	62 17       	cp	r22, r18
    1d2a:	73 07       	cpc	r23, r19
    1d2c:	84 07       	cpc	r24, r20
    1d2e:	ba 07       	cpc	r27, r26
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__divsf3_pse+0xae>
    1d32:	62 1b       	sub	r22, r18
    1d34:	73 0b       	sbc	r23, r19
    1d36:	84 0b       	sbc	r24, r20
    1d38:	ba 0b       	sbc	r27, r26
    1d3a:	ee 1f       	adc	r30, r30
    1d3c:	88 f7       	brcc	.-30     	; 0x1d20 <__divsf3_pse+0x94>
    1d3e:	e0 95       	com	r30
    1d40:	08 95       	ret

00001d42 <__fixsfdi>:
    1d42:	be e3       	ldi	r27, 0x3E	; 62
    1d44:	04 d0       	rcall	.+8      	; 0x1d4e <__fixunssfdi+0x2>
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <__fixsfdi+0x8>
    1d48:	90 e8       	ldi	r25, 0x80	; 128
    1d4a:	08 95       	ret

00001d4c <__fixunssfdi>:
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	22 27       	eor	r18, r18
    1d50:	33 27       	eor	r19, r19
    1d52:	a9 01       	movw	r20, r18
    1d54:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_splitA>
    1d58:	60 f1       	brcs	.+88     	; 0x1db2 <__fixunssfdi+0x66>
    1d5a:	9f 57       	subi	r25, 0x7F	; 127
    1d5c:	48 f1       	brcs	.+82     	; 0x1db0 <__fixunssfdi+0x64>
    1d5e:	b9 17       	cp	r27, r25
    1d60:	40 f1       	brcs	.+80     	; 0x1db2 <__fixunssfdi+0x66>
    1d62:	bf e3       	ldi	r27, 0x3F	; 63
    1d64:	b9 1b       	sub	r27, r25
    1d66:	99 27       	eor	r25, r25
    1d68:	b8 50       	subi	r27, 0x08	; 8
    1d6a:	3a f4       	brpl	.+14     	; 0x1d7a <__fixunssfdi+0x2e>
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	b3 95       	inc	r27
    1d76:	d2 f3       	brmi	.-12     	; 0x1d6c <__fixunssfdi+0x20>
    1d78:	16 c0       	rjmp	.+44     	; 0x1da6 <__fixunssfdi+0x5a>
    1d7a:	b8 50       	subi	r27, 0x08	; 8
    1d7c:	4a f0       	brmi	.+18     	; 0x1d90 <__fixunssfdi+0x44>
    1d7e:	23 2f       	mov	r18, r19
    1d80:	34 2f       	mov	r19, r20
    1d82:	45 2f       	mov	r20, r21
    1d84:	56 2f       	mov	r21, r22
    1d86:	67 2f       	mov	r22, r23
    1d88:	78 2f       	mov	r23, r24
    1d8a:	88 27       	eor	r24, r24
    1d8c:	b8 50       	subi	r27, 0x08	; 8
    1d8e:	ba f7       	brpl	.-18     	; 0x1d7e <__fixunssfdi+0x32>
    1d90:	b8 5f       	subi	r27, 0xF8	; 248
    1d92:	49 f0       	breq	.+18     	; 0x1da6 <__fixunssfdi+0x5a>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	57 95       	ror	r21
    1d9c:	47 95       	ror	r20
    1d9e:	37 95       	ror	r19
    1da0:	27 95       	ror	r18
    1da2:	ba 95       	dec	r27
    1da4:	b9 f7       	brne	.-18     	; 0x1d94 <__fixunssfdi+0x48>
    1da6:	16 f4       	brtc	.+4      	; 0x1dac <__fixunssfdi+0x60>
    1da8:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__fp_negdi>
    1dac:	88 94       	clc
    1dae:	08 95       	ret
    1db0:	88 94       	clc
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	70 e0       	ldi	r23, 0x00	; 0
    1db6:	cb 01       	movw	r24, r22
    1db8:	08 95       	ret

00001dba <__fixsfsi>:
    1dba:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__fixunssfsi>
    1dbe:	68 94       	set
    1dc0:	b1 11       	cpse	r27, r1
    1dc2:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_szero>
    1dc6:	08 95       	ret

00001dc8 <__fixunssfsi>:
    1dc8:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__fp_splitA>
    1dcc:	88 f0       	brcs	.+34     	; 0x1df0 <__fixunssfsi+0x28>
    1dce:	9f 57       	subi	r25, 0x7F	; 127
    1dd0:	98 f0       	brcs	.+38     	; 0x1df8 <__fixunssfsi+0x30>
    1dd2:	b9 2f       	mov	r27, r25
    1dd4:	99 27       	eor	r25, r25
    1dd6:	b7 51       	subi	r27, 0x17	; 23
    1dd8:	b0 f0       	brcs	.+44     	; 0x1e06 <__fixunssfsi+0x3e>
    1dda:	e1 f0       	breq	.+56     	; 0x1e14 <__fixunssfsi+0x4c>
    1ddc:	66 0f       	add	r22, r22
    1dde:	77 1f       	adc	r23, r23
    1de0:	88 1f       	adc	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	1a f0       	brmi	.+6      	; 0x1dec <__fixunssfsi+0x24>
    1de6:	ba 95       	dec	r27
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <__fixunssfsi+0x14>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <__fixunssfsi+0x4c>
    1dec:	b1 30       	cpi	r27, 0x01	; 1
    1dee:	91 f0       	breq	.+36     	; 0x1e14 <__fixunssfsi+0x4c>
    1df0:	0e 94 0c 10 	call	0x2018	; 0x2018 <__fp_zero>
    1df4:	b1 e0       	ldi	r27, 0x01	; 1
    1df6:	08 95       	ret
    1df8:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__fp_zero>
    1dfc:	67 2f       	mov	r22, r23
    1dfe:	78 2f       	mov	r23, r24
    1e00:	88 27       	eor	r24, r24
    1e02:	b8 5f       	subi	r27, 0xF8	; 248
    1e04:	39 f0       	breq	.+14     	; 0x1e14 <__fixunssfsi+0x4c>
    1e06:	b9 3f       	cpi	r27, 0xF9	; 249
    1e08:	cc f3       	brlt	.-14     	; 0x1dfc <__fixunssfsi+0x34>
    1e0a:	86 95       	lsr	r24
    1e0c:	77 95       	ror	r23
    1e0e:	67 95       	ror	r22
    1e10:	b3 95       	inc	r27
    1e12:	d9 f7       	brne	.-10     	; 0x1e0a <__fixunssfsi+0x42>
    1e14:	3e f4       	brtc	.+14     	; 0x1e24 <__fixunssfsi+0x5c>
    1e16:	90 95       	com	r25
    1e18:	80 95       	com	r24
    1e1a:	70 95       	com	r23
    1e1c:	61 95       	neg	r22
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	08 95       	ret

00001e26 <__floatunsisf>:
    1e26:	e8 94       	clt
    1e28:	09 c0       	rjmp	.+18     	; 0x1e3c <__floatsisf+0x12>

00001e2a <__floatsisf>:
    1e2a:	97 fb       	bst	r25, 7
    1e2c:	3e f4       	brtc	.+14     	; 0x1e3c <__floatsisf+0x12>
    1e2e:	90 95       	com	r25
    1e30:	80 95       	com	r24
    1e32:	70 95       	com	r23
    1e34:	61 95       	neg	r22
    1e36:	7f 4f       	sbci	r23, 0xFF	; 255
    1e38:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	99 23       	and	r25, r25
    1e3e:	a9 f0       	breq	.+42     	; 0x1e6a <__floatsisf+0x40>
    1e40:	f9 2f       	mov	r31, r25
    1e42:	96 e9       	ldi	r25, 0x96	; 150
    1e44:	bb 27       	eor	r27, r27
    1e46:	93 95       	inc	r25
    1e48:	f6 95       	lsr	r31
    1e4a:	87 95       	ror	r24
    1e4c:	77 95       	ror	r23
    1e4e:	67 95       	ror	r22
    1e50:	b7 95       	ror	r27
    1e52:	f1 11       	cpse	r31, r1
    1e54:	f8 cf       	rjmp	.-16     	; 0x1e46 <__floatsisf+0x1c>
    1e56:	fa f4       	brpl	.+62     	; 0x1e96 <__floatsisf+0x6c>
    1e58:	bb 0f       	add	r27, r27
    1e5a:	11 f4       	brne	.+4      	; 0x1e60 <__floatsisf+0x36>
    1e5c:	60 ff       	sbrs	r22, 0
    1e5e:	1b c0       	rjmp	.+54     	; 0x1e96 <__floatsisf+0x6c>
    1e60:	6f 5f       	subi	r22, 0xFF	; 255
    1e62:	7f 4f       	sbci	r23, 0xFF	; 255
    1e64:	8f 4f       	sbci	r24, 0xFF	; 255
    1e66:	9f 4f       	sbci	r25, 0xFF	; 255
    1e68:	16 c0       	rjmp	.+44     	; 0x1e96 <__floatsisf+0x6c>
    1e6a:	88 23       	and	r24, r24
    1e6c:	11 f0       	breq	.+4      	; 0x1e72 <__floatsisf+0x48>
    1e6e:	96 e9       	ldi	r25, 0x96	; 150
    1e70:	11 c0       	rjmp	.+34     	; 0x1e94 <__floatsisf+0x6a>
    1e72:	77 23       	and	r23, r23
    1e74:	21 f0       	breq	.+8      	; 0x1e7e <__floatsisf+0x54>
    1e76:	9e e8       	ldi	r25, 0x8E	; 142
    1e78:	87 2f       	mov	r24, r23
    1e7a:	76 2f       	mov	r23, r22
    1e7c:	05 c0       	rjmp	.+10     	; 0x1e88 <__floatsisf+0x5e>
    1e7e:	66 23       	and	r22, r22
    1e80:	71 f0       	breq	.+28     	; 0x1e9e <__floatsisf+0x74>
    1e82:	96 e8       	ldi	r25, 0x86	; 134
    1e84:	86 2f       	mov	r24, r22
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	2a f0       	brmi	.+10     	; 0x1e96 <__floatsisf+0x6c>
    1e8c:	9a 95       	dec	r25
    1e8e:	66 0f       	add	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	88 1f       	adc	r24, r24
    1e94:	da f7       	brpl	.-10     	; 0x1e8c <__floatsisf+0x62>
    1e96:	88 0f       	add	r24, r24
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	97 f9       	bld	r25, 7
    1e9e:	08 95       	ret

00001ea0 <__floatundisf>:
    1ea0:	e8 94       	clt

00001ea2 <__fp_di2sf>:
    1ea2:	f9 2f       	mov	r31, r25
    1ea4:	96 eb       	ldi	r25, 0xB6	; 182
    1ea6:	ff 23       	and	r31, r31
    1ea8:	81 f0       	breq	.+32     	; 0x1eca <__fp_di2sf+0x28>
    1eaa:	12 16       	cp	r1, r18
    1eac:	13 06       	cpc	r1, r19
    1eae:	14 06       	cpc	r1, r20
    1eb0:	44 0b       	sbc	r20, r20
    1eb2:	93 95       	inc	r25
    1eb4:	f6 95       	lsr	r31
    1eb6:	87 95       	ror	r24
    1eb8:	77 95       	ror	r23
    1eba:	67 95       	ror	r22
    1ebc:	57 95       	ror	r21
    1ebe:	40 40       	sbci	r20, 0x00	; 0
    1ec0:	ff 23       	and	r31, r31
    1ec2:	b9 f7       	brne	.-18     	; 0x1eb2 <__fp_di2sf+0x10>
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <__fp_di2sf+0x5a>
    1ec6:	99 27       	eor	r25, r25
    1ec8:	08 95       	ret
    1eca:	88 23       	and	r24, r24
    1ecc:	51 f4       	brne	.+20     	; 0x1ee2 <__fp_di2sf+0x40>
    1ece:	98 50       	subi	r25, 0x08	; 8
    1ed0:	d2 f7       	brpl	.-12     	; 0x1ec6 <__fp_di2sf+0x24>
    1ed2:	87 2b       	or	r24, r23
    1ed4:	76 2f       	mov	r23, r22
    1ed6:	65 2f       	mov	r22, r21
    1ed8:	54 2f       	mov	r21, r20
    1eda:	43 2f       	mov	r20, r19
    1edc:	32 2f       	mov	r19, r18
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	b1 f3       	breq	.-20     	; 0x1ece <__fp_di2sf+0x2c>
    1ee2:	12 16       	cp	r1, r18
    1ee4:	13 06       	cpc	r1, r19
    1ee6:	14 06       	cpc	r1, r20
    1ee8:	44 0b       	sbc	r20, r20
    1eea:	88 23       	and	r24, r24
    1eec:	3a f0       	brmi	.+14     	; 0x1efc <__fp_di2sf+0x5a>
    1eee:	9a 95       	dec	r25
    1ef0:	44 0f       	add	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	66 1f       	adc	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	ca f7       	brpl	.-14     	; 0x1eee <__fp_di2sf+0x4c>
    1efc:	55 23       	and	r21, r21
    1efe:	4a f4       	brpl	.+18     	; 0x1f12 <__fp_di2sf+0x70>
    1f00:	44 0f       	add	r20, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	11 f4       	brne	.+4      	; 0x1f0a <__fp_di2sf+0x68>
    1f06:	60 ff       	sbrs	r22, 0
    1f08:	04 c0       	rjmp	.+8      	; 0x1f12 <__fp_di2sf+0x70>
    1f0a:	6f 5f       	subi	r22, 0xFF	; 255
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	88 0f       	add	r24, r24
    1f14:	96 95       	lsr	r25
    1f16:	87 95       	ror	r24
    1f18:	97 f9       	bld	r25, 7
    1f1a:	08 95       	ret

00001f1c <__fp_cmp>:
    1f1c:	99 0f       	add	r25, r25
    1f1e:	00 08       	sbc	r0, r0
    1f20:	55 0f       	add	r21, r21
    1f22:	aa 0b       	sbc	r26, r26
    1f24:	e0 e8       	ldi	r30, 0x80	; 128
    1f26:	fe ef       	ldi	r31, 0xFE	; 254
    1f28:	16 16       	cp	r1, r22
    1f2a:	17 06       	cpc	r1, r23
    1f2c:	e8 07       	cpc	r30, r24
    1f2e:	f9 07       	cpc	r31, r25
    1f30:	c0 f0       	brcs	.+48     	; 0x1f62 <__fp_cmp+0x46>
    1f32:	12 16       	cp	r1, r18
    1f34:	13 06       	cpc	r1, r19
    1f36:	e4 07       	cpc	r30, r20
    1f38:	f5 07       	cpc	r31, r21
    1f3a:	98 f0       	brcs	.+38     	; 0x1f62 <__fp_cmp+0x46>
    1f3c:	62 1b       	sub	r22, r18
    1f3e:	73 0b       	sbc	r23, r19
    1f40:	84 0b       	sbc	r24, r20
    1f42:	95 0b       	sbc	r25, r21
    1f44:	39 f4       	brne	.+14     	; 0x1f54 <__fp_cmp+0x38>
    1f46:	0a 26       	eor	r0, r26
    1f48:	61 f0       	breq	.+24     	; 0x1f62 <__fp_cmp+0x46>
    1f4a:	23 2b       	or	r18, r19
    1f4c:	24 2b       	or	r18, r20
    1f4e:	25 2b       	or	r18, r21
    1f50:	21 f4       	brne	.+8      	; 0x1f5a <__fp_cmp+0x3e>
    1f52:	08 95       	ret
    1f54:	0a 26       	eor	r0, r26
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <__fp_cmp+0x3e>
    1f58:	a1 40       	sbci	r26, 0x01	; 1
    1f5a:	a6 95       	lsr	r26
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	81 1d       	adc	r24, r1
    1f60:	81 1d       	adc	r24, r1
    1f62:	08 95       	ret

00001f64 <__fp_inf>:
    1f64:	97 f9       	bld	r25, 7
    1f66:	9f 67       	ori	r25, 0x7F	; 127
    1f68:	80 e8       	ldi	r24, 0x80	; 128
    1f6a:	70 e0       	ldi	r23, 0x00	; 0
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	08 95       	ret

00001f70 <__fp_nan>:
    1f70:	9f ef       	ldi	r25, 0xFF	; 255
    1f72:	80 ec       	ldi	r24, 0xC0	; 192
    1f74:	08 95       	ret

00001f76 <__fp_negdi>:
    1f76:	90 95       	com	r25
    1f78:	80 95       	com	r24
    1f7a:	70 95       	com	r23
    1f7c:	60 95       	com	r22
    1f7e:	50 95       	com	r21
    1f80:	40 95       	com	r20
    1f82:	30 95       	com	r19
    1f84:	21 95       	neg	r18
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	4f 4f       	sbci	r20, 0xFF	; 255
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	6f 4f       	sbci	r22, 0xFF	; 255
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	8f 4f       	sbci	r24, 0xFF	; 255
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__fp_pscA>:
    1f96:	00 24       	eor	r0, r0
    1f98:	0a 94       	dec	r0
    1f9a:	16 16       	cp	r1, r22
    1f9c:	17 06       	cpc	r1, r23
    1f9e:	18 06       	cpc	r1, r24
    1fa0:	09 06       	cpc	r0, r25
    1fa2:	08 95       	ret

00001fa4 <__fp_pscB>:
    1fa4:	00 24       	eor	r0, r0
    1fa6:	0a 94       	dec	r0
    1fa8:	12 16       	cp	r1, r18
    1faa:	13 06       	cpc	r1, r19
    1fac:	14 06       	cpc	r1, r20
    1fae:	05 06       	cpc	r0, r21
    1fb0:	08 95       	ret

00001fb2 <__fp_round>:
    1fb2:	09 2e       	mov	r0, r25
    1fb4:	03 94       	inc	r0
    1fb6:	00 0c       	add	r0, r0
    1fb8:	11 f4       	brne	.+4      	; 0x1fbe <__fp_round+0xc>
    1fba:	88 23       	and	r24, r24
    1fbc:	52 f0       	brmi	.+20     	; 0x1fd2 <__fp_round+0x20>
    1fbe:	bb 0f       	add	r27, r27
    1fc0:	40 f4       	brcc	.+16     	; 0x1fd2 <__fp_round+0x20>
    1fc2:	bf 2b       	or	r27, r31
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <__fp_round+0x18>
    1fc6:	60 ff       	sbrs	r22, 0
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <__fp_round+0x20>
    1fca:	6f 5f       	subi	r22, 0xFF	; 255
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd2:	08 95       	ret

00001fd4 <__fp_split3>:
    1fd4:	57 fd       	sbrc	r21, 7
    1fd6:	90 58       	subi	r25, 0x80	; 128
    1fd8:	44 0f       	add	r20, r20
    1fda:	55 1f       	adc	r21, r21
    1fdc:	59 f0       	breq	.+22     	; 0x1ff4 <__fp_splitA+0x10>
    1fde:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe0:	71 f0       	breq	.+28     	; 0x1ffe <__fp_splitA+0x1a>
    1fe2:	47 95       	ror	r20

00001fe4 <__fp_splitA>:
    1fe4:	88 0f       	add	r24, r24
    1fe6:	97 fb       	bst	r25, 7
    1fe8:	99 1f       	adc	r25, r25
    1fea:	61 f0       	breq	.+24     	; 0x2004 <__fp_splitA+0x20>
    1fec:	9f 3f       	cpi	r25, 0xFF	; 255
    1fee:	79 f0       	breq	.+30     	; 0x200e <__fp_splitA+0x2a>
    1ff0:	87 95       	ror	r24
    1ff2:	08 95       	ret
    1ff4:	12 16       	cp	r1, r18
    1ff6:	13 06       	cpc	r1, r19
    1ff8:	14 06       	cpc	r1, r20
    1ffa:	55 1f       	adc	r21, r21
    1ffc:	f2 cf       	rjmp	.-28     	; 0x1fe2 <__fp_split3+0xe>
    1ffe:	46 95       	lsr	r20
    2000:	f1 df       	rcall	.-30     	; 0x1fe4 <__fp_splitA>
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <__fp_splitA+0x30>
    2004:	16 16       	cp	r1, r22
    2006:	17 06       	cpc	r1, r23
    2008:	18 06       	cpc	r1, r24
    200a:	99 1f       	adc	r25, r25
    200c:	f1 cf       	rjmp	.-30     	; 0x1ff0 <__fp_splitA+0xc>
    200e:	86 95       	lsr	r24
    2010:	71 05       	cpc	r23, r1
    2012:	61 05       	cpc	r22, r1
    2014:	08 94       	sec
    2016:	08 95       	ret

00002018 <__fp_zero>:
    2018:	e8 94       	clt

0000201a <__fp_szero>:
    201a:	bb 27       	eor	r27, r27
    201c:	66 27       	eor	r22, r22
    201e:	77 27       	eor	r23, r23
    2020:	cb 01       	movw	r24, r22
    2022:	97 f9       	bld	r25, 7
    2024:	08 95       	ret

00002026 <__gesf2>:
    2026:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <__fp_cmp>
    202a:	08 f4       	brcc	.+2      	; 0x202e <__gesf2+0x8>
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	08 95       	ret

00002030 <__mulsf3>:
    2030:	0e 94 2b 10 	call	0x2056	; 0x2056 <__mulsf3x>
    2034:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <__fp_round>
    2038:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscA>
    203c:	38 f0       	brcs	.+14     	; 0x204c <__mulsf3+0x1c>
    203e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__fp_pscB>
    2042:	20 f0       	brcs	.+8      	; 0x204c <__mulsf3+0x1c>
    2044:	95 23       	and	r25, r21
    2046:	11 f0       	breq	.+4      	; 0x204c <__mulsf3+0x1c>
    2048:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    204c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__fp_nan>
    2050:	11 24       	eor	r1, r1
    2052:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_szero>

00002056 <__mulsf3x>:
    2056:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <__fp_split3>
    205a:	70 f3       	brcs	.-36     	; 0x2038 <__mulsf3+0x8>

0000205c <__mulsf3_pse>:
    205c:	95 9f       	mul	r25, r21
    205e:	c1 f3       	breq	.-16     	; 0x2050 <__mulsf3+0x20>
    2060:	95 0f       	add	r25, r21
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	55 1f       	adc	r21, r21
    2066:	62 9f       	mul	r22, r18
    2068:	f0 01       	movw	r30, r0
    206a:	72 9f       	mul	r23, r18
    206c:	bb 27       	eor	r27, r27
    206e:	f0 0d       	add	r31, r0
    2070:	b1 1d       	adc	r27, r1
    2072:	63 9f       	mul	r22, r19
    2074:	aa 27       	eor	r26, r26
    2076:	f0 0d       	add	r31, r0
    2078:	b1 1d       	adc	r27, r1
    207a:	aa 1f       	adc	r26, r26
    207c:	64 9f       	mul	r22, r20
    207e:	66 27       	eor	r22, r22
    2080:	b0 0d       	add	r27, r0
    2082:	a1 1d       	adc	r26, r1
    2084:	66 1f       	adc	r22, r22
    2086:	82 9f       	mul	r24, r18
    2088:	22 27       	eor	r18, r18
    208a:	b0 0d       	add	r27, r0
    208c:	a1 1d       	adc	r26, r1
    208e:	62 1f       	adc	r22, r18
    2090:	73 9f       	mul	r23, r19
    2092:	b0 0d       	add	r27, r0
    2094:	a1 1d       	adc	r26, r1
    2096:	62 1f       	adc	r22, r18
    2098:	83 9f       	mul	r24, r19
    209a:	a0 0d       	add	r26, r0
    209c:	61 1d       	adc	r22, r1
    209e:	22 1f       	adc	r18, r18
    20a0:	74 9f       	mul	r23, r20
    20a2:	33 27       	eor	r19, r19
    20a4:	a0 0d       	add	r26, r0
    20a6:	61 1d       	adc	r22, r1
    20a8:	23 1f       	adc	r18, r19
    20aa:	84 9f       	mul	r24, r20
    20ac:	60 0d       	add	r22, r0
    20ae:	21 1d       	adc	r18, r1
    20b0:	82 2f       	mov	r24, r18
    20b2:	76 2f       	mov	r23, r22
    20b4:	6a 2f       	mov	r22, r26
    20b6:	11 24       	eor	r1, r1
    20b8:	9f 57       	subi	r25, 0x7F	; 127
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	9a f0       	brmi	.+38     	; 0x20e4 <__mulsf3_pse+0x88>
    20be:	f1 f0       	breq	.+60     	; 0x20fc <__mulsf3_pse+0xa0>
    20c0:	88 23       	and	r24, r24
    20c2:	4a f0       	brmi	.+18     	; 0x20d6 <__mulsf3_pse+0x7a>
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	bb 1f       	adc	r27, r27
    20ca:	66 1f       	adc	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	88 1f       	adc	r24, r24
    20d0:	91 50       	subi	r25, 0x01	; 1
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	a9 f7       	brne	.-22     	; 0x20c0 <__mulsf3_pse+0x64>
    20d6:	9e 3f       	cpi	r25, 0xFE	; 254
    20d8:	51 05       	cpc	r21, r1
    20da:	80 f0       	brcs	.+32     	; 0x20fc <__mulsf3_pse+0xa0>
    20dc:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__fp_inf>
    20e0:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__fp_szero>
    20e4:	5f 3f       	cpi	r21, 0xFF	; 255
    20e6:	e4 f3       	brlt	.-8      	; 0x20e0 <__mulsf3_pse+0x84>
    20e8:	98 3e       	cpi	r25, 0xE8	; 232
    20ea:	d4 f3       	brlt	.-12     	; 0x20e0 <__mulsf3_pse+0x84>
    20ec:	86 95       	lsr	r24
    20ee:	77 95       	ror	r23
    20f0:	67 95       	ror	r22
    20f2:	b7 95       	ror	r27
    20f4:	f7 95       	ror	r31
    20f6:	e7 95       	ror	r30
    20f8:	9f 5f       	subi	r25, 0xFF	; 255
    20fa:	c1 f7       	brne	.-16     	; 0x20ec <__mulsf3_pse+0x90>
    20fc:	fe 2b       	or	r31, r30
    20fe:	88 0f       	add	r24, r24
    2100:	91 1d       	adc	r25, r1
    2102:	96 95       	lsr	r25
    2104:	87 95       	ror	r24
    2106:	97 f9       	bld	r25, 7
    2108:	08 95       	ret

0000210a <__udivmodsi4>:
    210a:	a1 e2       	ldi	r26, 0x21	; 33
    210c:	1a 2e       	mov	r1, r26
    210e:	aa 1b       	sub	r26, r26
    2110:	bb 1b       	sub	r27, r27
    2112:	fd 01       	movw	r30, r26
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <__udivmodsi4_ep>

00002116 <__udivmodsi4_loop>:
    2116:	aa 1f       	adc	r26, r26
    2118:	bb 1f       	adc	r27, r27
    211a:	ee 1f       	adc	r30, r30
    211c:	ff 1f       	adc	r31, r31
    211e:	a2 17       	cp	r26, r18
    2120:	b3 07       	cpc	r27, r19
    2122:	e4 07       	cpc	r30, r20
    2124:	f5 07       	cpc	r31, r21
    2126:	20 f0       	brcs	.+8      	; 0x2130 <__udivmodsi4_ep>
    2128:	a2 1b       	sub	r26, r18
    212a:	b3 0b       	sbc	r27, r19
    212c:	e4 0b       	sbc	r30, r20
    212e:	f5 0b       	sbc	r31, r21

00002130 <__udivmodsi4_ep>:
    2130:	66 1f       	adc	r22, r22
    2132:	77 1f       	adc	r23, r23
    2134:	88 1f       	adc	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	1a 94       	dec	r1
    213a:	69 f7       	brne	.-38     	; 0x2116 <__udivmodsi4_loop>
    213c:	60 95       	com	r22
    213e:	70 95       	com	r23
    2140:	80 95       	com	r24
    2142:	90 95       	com	r25
    2144:	9b 01       	movw	r18, r22
    2146:	ac 01       	movw	r20, r24
    2148:	bd 01       	movw	r22, r26
    214a:	cf 01       	movw	r24, r30
    214c:	08 95       	ret

0000214e <__divmodsi4>:
    214e:	05 2e       	mov	r0, r21
    2150:	97 fb       	bst	r25, 7
    2152:	1e f4       	brtc	.+6      	; 0x215a <__divmodsi4+0xc>
    2154:	00 94       	com	r0
    2156:	0e 94 be 10 	call	0x217c	; 0x217c <__negsi2>
    215a:	57 fd       	sbrc	r21, 7
    215c:	07 d0       	rcall	.+14     	; 0x216c <__divmodsi4_neg2>
    215e:	0e 94 85 10 	call	0x210a	; 0x210a <__udivmodsi4>
    2162:	07 fc       	sbrc	r0, 7
    2164:	03 d0       	rcall	.+6      	; 0x216c <__divmodsi4_neg2>
    2166:	4e f4       	brtc	.+18     	; 0x217a <__divmodsi4_exit>
    2168:	0c 94 be 10 	jmp	0x217c	; 0x217c <__negsi2>

0000216c <__divmodsi4_neg2>:
    216c:	50 95       	com	r21
    216e:	40 95       	com	r20
    2170:	30 95       	com	r19
    2172:	21 95       	neg	r18
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	4f 4f       	sbci	r20, 0xFF	; 255
    2178:	5f 4f       	sbci	r21, 0xFF	; 255

0000217a <__divmodsi4_exit>:
    217a:	08 95       	ret

0000217c <__negsi2>:
    217c:	90 95       	com	r25
    217e:	80 95       	com	r24
    2180:	70 95       	com	r23
    2182:	61 95       	neg	r22
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	8f 4f       	sbci	r24, 0xFF	; 255
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	08 95       	ret

0000218c <__umulhisi3>:
    218c:	a2 9f       	mul	r26, r18
    218e:	b0 01       	movw	r22, r0
    2190:	b3 9f       	mul	r27, r19
    2192:	c0 01       	movw	r24, r0
    2194:	a3 9f       	mul	r26, r19
    2196:	70 0d       	add	r23, r0
    2198:	81 1d       	adc	r24, r1
    219a:	11 24       	eor	r1, r1
    219c:	91 1d       	adc	r25, r1
    219e:	b2 9f       	mul	r27, r18
    21a0:	70 0d       	add	r23, r0
    21a2:	81 1d       	adc	r24, r1
    21a4:	11 24       	eor	r1, r1
    21a6:	91 1d       	adc	r25, r1
    21a8:	08 95       	ret

000021aa <__muluhisi3>:
    21aa:	0e 94 c6 10 	call	0x218c	; 0x218c <__umulhisi3>
    21ae:	a5 9f       	mul	r26, r21
    21b0:	90 0d       	add	r25, r0
    21b2:	b4 9f       	mul	r27, r20
    21b4:	90 0d       	add	r25, r0
    21b6:	a4 9f       	mul	r26, r20
    21b8:	80 0d       	add	r24, r0
    21ba:	91 1d       	adc	r25, r1
    21bc:	11 24       	eor	r1, r1
    21be:	08 95       	ret

000021c0 <__umoddi3>:
    21c0:	68 94       	set
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <__udivdi3_umoddi3>

000021c4 <__udivdi3>:
    21c4:	e8 94       	clt

000021c6 <__udivdi3_umoddi3>:
    21c6:	8f 92       	push	r8
    21c8:	9f 92       	push	r9
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__udivmod64>
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	9f 90       	pop	r9
    21d8:	8f 90       	pop	r8
    21da:	08 95       	ret

000021dc <__udivmod64>:
    21dc:	88 24       	eor	r8, r8
    21de:	99 24       	eor	r9, r9
    21e0:	f4 01       	movw	r30, r8
    21e2:	e4 01       	movw	r28, r8
    21e4:	b0 e4       	ldi	r27, 0x40	; 64
    21e6:	9f 93       	push	r25
    21e8:	aa 27       	eor	r26, r26
    21ea:	9a 15       	cp	r25, r10
    21ec:	8b 04       	cpc	r8, r11
    21ee:	9c 04       	cpc	r9, r12
    21f0:	ed 05       	cpc	r30, r13
    21f2:	fe 05       	cpc	r31, r14
    21f4:	cf 05       	cpc	r28, r15
    21f6:	d0 07       	cpc	r29, r16
    21f8:	a1 07       	cpc	r26, r17
    21fa:	98 f4       	brcc	.+38     	; 0x2222 <__udivmod64+0x46>
    21fc:	ad 2f       	mov	r26, r29
    21fe:	dc 2f       	mov	r29, r28
    2200:	cf 2f       	mov	r28, r31
    2202:	fe 2f       	mov	r31, r30
    2204:	e9 2d       	mov	r30, r9
    2206:	98 2c       	mov	r9, r8
    2208:	89 2e       	mov	r8, r25
    220a:	98 2f       	mov	r25, r24
    220c:	87 2f       	mov	r24, r23
    220e:	76 2f       	mov	r23, r22
    2210:	65 2f       	mov	r22, r21
    2212:	54 2f       	mov	r21, r20
    2214:	43 2f       	mov	r20, r19
    2216:	32 2f       	mov	r19, r18
    2218:	22 27       	eor	r18, r18
    221a:	b8 50       	subi	r27, 0x08	; 8
    221c:	31 f7       	brne	.-52     	; 0x21ea <__udivmod64+0xe>
    221e:	bf 91       	pop	r27
    2220:	27 c0       	rjmp	.+78     	; 0x2270 <__udivmod64+0x94>
    2222:	1b 2e       	mov	r1, r27
    2224:	bf 91       	pop	r27
    2226:	bb 27       	eor	r27, r27
    2228:	22 0f       	add	r18, r18
    222a:	33 1f       	adc	r19, r19
    222c:	44 1f       	adc	r20, r20
    222e:	55 1f       	adc	r21, r21
    2230:	66 1f       	adc	r22, r22
    2232:	77 1f       	adc	r23, r23
    2234:	88 1f       	adc	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 1c       	adc	r8, r8
    223a:	99 1c       	adc	r9, r9
    223c:	ee 1f       	adc	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	cc 1f       	adc	r28, r28
    2242:	dd 1f       	adc	r29, r29
    2244:	aa 1f       	adc	r26, r26
    2246:	bb 1f       	adc	r27, r27
    2248:	8a 14       	cp	r8, r10
    224a:	9b 04       	cpc	r9, r11
    224c:	ec 05       	cpc	r30, r12
    224e:	fd 05       	cpc	r31, r13
    2250:	ce 05       	cpc	r28, r14
    2252:	df 05       	cpc	r29, r15
    2254:	a0 07       	cpc	r26, r16
    2256:	b1 07       	cpc	r27, r17
    2258:	48 f0       	brcs	.+18     	; 0x226c <__udivmod64+0x90>
    225a:	8a 18       	sub	r8, r10
    225c:	9b 08       	sbc	r9, r11
    225e:	ec 09       	sbc	r30, r12
    2260:	fd 09       	sbc	r31, r13
    2262:	ce 09       	sbc	r28, r14
    2264:	df 09       	sbc	r29, r15
    2266:	a0 0b       	sbc	r26, r16
    2268:	b1 0b       	sbc	r27, r17
    226a:	21 60       	ori	r18, 0x01	; 1
    226c:	1a 94       	dec	r1
    226e:	e1 f6       	brne	.-72     	; 0x2228 <__udivmod64+0x4c>
    2270:	2e f4       	brtc	.+10     	; 0x227c <__udivmod64+0xa0>
    2272:	94 01       	movw	r18, r8
    2274:	af 01       	movw	r20, r30
    2276:	be 01       	movw	r22, r28
    2278:	cd 01       	movw	r24, r26
    227a:	00 0c       	add	r0, r0
    227c:	08 95       	ret

0000227e <__ashldi3>:
    227e:	0f 93       	push	r16
    2280:	08 30       	cpi	r16, 0x08	; 8
    2282:	90 f0       	brcs	.+36     	; 0x22a8 <__ashldi3+0x2a>
    2284:	98 2f       	mov	r25, r24
    2286:	87 2f       	mov	r24, r23
    2288:	76 2f       	mov	r23, r22
    228a:	65 2f       	mov	r22, r21
    228c:	54 2f       	mov	r21, r20
    228e:	43 2f       	mov	r20, r19
    2290:	32 2f       	mov	r19, r18
    2292:	22 27       	eor	r18, r18
    2294:	08 50       	subi	r16, 0x08	; 8
    2296:	f4 cf       	rjmp	.-24     	; 0x2280 <__ashldi3+0x2>
    2298:	22 0f       	add	r18, r18
    229a:	33 1f       	adc	r19, r19
    229c:	44 1f       	adc	r20, r20
    229e:	55 1f       	adc	r21, r21
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 95       	dec	r16
    22aa:	b2 f7       	brpl	.-20     	; 0x2298 <__ashldi3+0x1a>
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <__adddi3>:
    22b0:	2a 0d       	add	r18, r10
    22b2:	3b 1d       	adc	r19, r11
    22b4:	4c 1d       	adc	r20, r12
    22b6:	5d 1d       	adc	r21, r13
    22b8:	6e 1d       	adc	r22, r14
    22ba:	7f 1d       	adc	r23, r15
    22bc:	80 1f       	adc	r24, r16
    22be:	91 1f       	adc	r25, r17
    22c0:	08 95       	ret

000022c2 <eeprom_read_byte>:
    22c2:	f9 99       	sbic	0x1f, 1	; 31
    22c4:	fe cf       	rjmp	.-4      	; 0x22c2 <eeprom_read_byte>
    22c6:	92 bd       	out	0x22, r25	; 34
    22c8:	81 bd       	out	0x21, r24	; 33
    22ca:	f8 9a       	sbi	0x1f, 0	; 31
    22cc:	99 27       	eor	r25, r25
    22ce:	80 b5       	in	r24, 0x20	; 32
    22d0:	08 95       	ret

000022d2 <eeprom_read_word>:
    22d2:	a8 e1       	ldi	r26, 0x18	; 24
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	42 e0       	ldi	r20, 0x02	; 2
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	0c 94 84 11 	jmp	0x2308	; 0x2308 <eeprom_read_blraw>

000022de <eeprom_write_byte>:
    22de:	26 2f       	mov	r18, r22

000022e0 <eeprom_write_r18>:
    22e0:	f9 99       	sbic	0x1f, 1	; 31
    22e2:	fe cf       	rjmp	.-4      	; 0x22e0 <eeprom_write_r18>
    22e4:	1f ba       	out	0x1f, r1	; 31
    22e6:	92 bd       	out	0x22, r25	; 34
    22e8:	81 bd       	out	0x21, r24	; 33
    22ea:	20 bd       	out	0x20, r18	; 32
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	fa 9a       	sbi	0x1f, 2	; 31
    22f2:	f9 9a       	sbi	0x1f, 1	; 31
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	01 96       	adiw	r24, 0x01	; 1
    22f8:	08 95       	ret

000022fa <eeprom_write_word>:
    22fa:	0e 94 6f 11 	call	0x22de	; 0x22de <eeprom_write_byte>
    22fe:	27 2f       	mov	r18, r23
    2300:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <eeprom_write_r18>

00002304 <eeprom_read_block>:
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22

00002308 <eeprom_read_blraw>:
    2308:	fc 01       	movw	r30, r24
    230a:	f9 99       	sbic	0x1f, 1	; 31
    230c:	fe cf       	rjmp	.-4      	; 0x230a <eeprom_read_blraw+0x2>
    230e:	06 c0       	rjmp	.+12     	; 0x231c <eeprom_read_blraw+0x14>
    2310:	f2 bd       	out	0x22, r31	; 34
    2312:	e1 bd       	out	0x21, r30	; 33
    2314:	f8 9a       	sbi	0x1f, 0	; 31
    2316:	31 96       	adiw	r30, 0x01	; 1
    2318:	00 b4       	in	r0, 0x20	; 32
    231a:	0d 92       	st	X+, r0
    231c:	41 50       	subi	r20, 0x01	; 1
    231e:	50 40       	sbci	r21, 0x00	; 0
    2320:	b8 f7       	brcc	.-18     	; 0x2310 <eeprom_read_blraw+0x8>
    2322:	08 95       	ret

00002324 <_exit>:
    2324:	f8 94       	cli

00002326 <__stop_program>:
    2326:	ff cf       	rjmp	.-2      	; 0x2326 <__stop_program>
